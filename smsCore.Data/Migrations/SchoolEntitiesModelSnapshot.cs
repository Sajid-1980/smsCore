// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Models;

#nullable disable

namespace smsCore.Data.Migrations
{
    [DbContext(typeof(SchoolEntities))]
    partial class SchoolEntitiesModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Models.ActiveRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RatingMasterID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClassID")
                        .HasColumnType("int");

                    b.Property<int?>("StaffID")
                        .HasColumnType("int");

                    b.Property<int>("campusID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ActiveRatings");
                });

            modelBuilder.Entity("Models.AddmissionWaitingList", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CampusID")
                        .HasColumnType("int");

                    b.Property<int>("ClassID")
                        .HasColumnType("int");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CampusID");

                    b.HasIndex("ClassID");

                    b.ToTable("AddmissionWaitingLists");
                });

            modelBuilder.Entity("Models.Admission", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("CampuseID")
                        .HasColumnType("int");

                    b.Property<int>("ClassSectionID")
                        .HasColumnType("int");

                    b.Property<bool>("IsExpell")
                        .HasColumnType("bit");

                    b.Property<int>("Session")
                        .HasColumnType("int");

                    b.Property<int>("StudentID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CampuseID");

                    b.HasIndex("ClassSectionID");

                    b.HasIndex("StudentID");

                    b.ToTable("Admissions");
                });

            modelBuilder.Entity("Models.ApplicationLeave", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTo")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StaffId")
                        .HasColumnType("int");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StaffId");

                    b.ToTable("ApplicationLeave");
                });

            modelBuilder.Entity("Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Models.AssetStock", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Price")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PurchasedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Quantity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("AssetStocks");
                });

            modelBuilder.Entity("Models.Book", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("AccessionNo")
                        .HasColumnType("int");

                    b.Property<string>("Author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClassficationNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cornor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Edition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsIssuable")
                        .HasColumnType("bit");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pages")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PresentPosition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Price")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Publisher")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShelfNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Source")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Translator")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VolumeNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("YearOfPublishing")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("Models.CallRecord", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("AdmissionID")
                        .HasColumnType("int");

                    b.Property<string>("Durtion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("AdmissionID");

                    b.ToTable("CallRecords");
                });

            modelBuilder.Entity("Models.Campus", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("CampusName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("emailId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("mailingName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("mobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("web")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Campuses");
                });

            modelBuilder.Entity("Models.CampusUser", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("CampusID")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("CampusID");

                    b.HasIndex("UserID");

                    b.ToTable("CampusUsers");
                });

            modelBuilder.Entity("Models.Class", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("ClassName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MaxStrenth")
                        .HasColumnType("int");

                    b.Property<string>("ShortCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("Models.ClassFeeGroup", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("CampusID")
                        .HasColumnType("int");

                    b.Property<int>("ClassID")
                        .HasColumnType("int");

                    b.Property<int>("FeeGroupID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CampusID");

                    b.HasIndex("ClassID");

                    b.HasIndex("FeeGroupID");

                    b.ToTable("ClassFeeGroups");
                });

            modelBuilder.Entity("Models.ClassSection", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("CampusID")
                        .HasColumnType("int");

                    b.Property<int>("ClassID")
                        .HasColumnType("int");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("SectionID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CampusID");

                    b.HasIndex("ClassID");

                    b.HasIndex("SectionID");

                    b.ToTable("ClassSections");
                });

            modelBuilder.Entity("Models.ClassSubject", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("CampusID")
                        .HasColumnType("int");

                    b.Property<int>("ClassID")
                        .HasColumnType("int");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("SubjectID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CampusID");

                    b.HasIndex("ClassID");

                    b.HasIndex("SubjectID");

                    b.ToTable("ClassSubjects");
                });

            modelBuilder.Entity("Models.ComSub", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("Attendance")
                        .HasColumnType("int");

                    b.Property<int>("IssuedFee")
                        .HasColumnType("int");

                    b.Property<int>("ReceiveFee")
                        .HasColumnType("int");

                    b.Property<int>("Result")
                        .HasColumnType("int");

                    b.Property<int>("StudentID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("StudentID");

                    b.ToTable("ComSubs");
                });

            modelBuilder.Entity("Models.DOBChanx", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("EditDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("NewDOB")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OldDOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReferenceNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentID")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("StudentID");

                    b.HasIndex("UserID");

                    b.ToTable("DOBChanges");
                });

            modelBuilder.Entity("Models.DailyCash", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Particular")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("DailyCashes");
                });

            modelBuilder.Entity("Models.Driver", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("CampusID")
                        .HasColumnType("int");

                    b.Property<string>("DriverName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CampusID");

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("Models.EmployeeAttendance", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("AttendanceDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("AttendanceTypeID")
                        .HasColumnType("int");

                    b.Property<int>("StaffID")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("AttendanceTypeID");

                    b.HasIndex("StaffID");

                    b.HasIndex("UserID");

                    b.ToTable("EmployeeAttendance");
                });

            modelBuilder.Entity("Models.EmployeeAttendanceType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("AttendanceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("FineInDays")
                        .HasColumnType("float");

                    b.Property<int>("YearlyAllowed")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("EmployeeAttendanceType");
                });

            modelBuilder.Entity("Models.EmployeeAward", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("AwardType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("StaffID")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("EmployeeAwards");
                });

            modelBuilder.Entity("Models.EmployeeExperinceSubject", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("SubjectId");

                    b.ToTable("EmployeeExperinceSubjects");
                });

            modelBuilder.Entity("Models.EmployeeExprience", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Desgnition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("From")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Institution")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StfID")
                        .HasColumnType("int");

                    b.Property<string>("To")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("StfID");

                    b.ToTable("EmployeeExprience");
                });

            modelBuilder.Entity("Models.EmployeeMobile", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("MobileNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("StfID")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ID");

                    b.ToTable("EmployeeMobiles");
                });

            modelBuilder.Entity("Models.EmployeeShortLeave", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime?>("InTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OutTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("StaffID")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("StaffID");

                    b.HasIndex("UserID");

                    b.ToTable("EmployeeShortLeave");
                });

            modelBuilder.Entity("Models.EmployeeThumbImpression", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("Finger")
                        .HasColumnType("int");

                    b.Property<int>("StaffID")
                        .HasColumnType("int");

                    b.Property<string>("Thumb")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("StaffID");

                    b.ToTable("EmployeeThumbImpressions");
                });

            modelBuilder.Entity("Models.EmployeeWaitingList", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Photo")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Qualifaction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("EmployeeWaitingLists");
                });

            modelBuilder.Entity("Models.Exam", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("ExamName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Exams");
                });

            modelBuilder.Entity("Models.ExamDate", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("CampusID")
                        .HasColumnType("int");

                    b.Property<int>("ClassSectionID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExamDate1")
                        .HasColumnType("datetime2")
                        .HasColumnName("ExamDate");

                    b.Property<int>("ExamHeldID")
                        .HasColumnType("int");

                    b.Property<int>("SubjectID")
                        .HasColumnType("int");

                    b.Property<string>("TimeFrom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TotalMarks")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.HasIndex("CampusID");

                    b.HasIndex("ClassSectionID");

                    b.HasIndex("ExamHeldID");

                    b.HasIndex("SubjectID");

                    b.ToTable("ExamDates");
                });

            modelBuilder.Entity("Models.ExamHeld", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("CampusID")
                        .HasColumnType("int");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExamID")
                        .HasColumnType("int");

                    b.Property<bool>("VeiwAble")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.HasIndex("CampusID");

                    b.HasIndex("ExamID");

                    b.ToTable("ExamHelds");
                });

            modelBuilder.Entity("Models.ExamRemark", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("AdmissionID")
                        .HasColumnType("int");

                    b.Property<string>("Attendance")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoTeamWork")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Confid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discpline")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExamHeldID")
                        .HasColumnType("int");

                    b.Property<string>("Manners")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Neatness")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OralExp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhyFit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Punctuality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SocBeh")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("AdmissionID");

                    b.HasIndex("ExamHeldID");

                    b.HasIndex("UserID");

                    b.ToTable("ExamRemarks");
                });

            modelBuilder.Entity("Models.ExamRemarksDetail", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("ExamRemarksDetail");
                });

            modelBuilder.Entity("Models.ExamsRule", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<double>("A")
                        .HasColumnType("float");

                    b.Property<double>("APlus")
                        .HasColumnType("float");

                    b.Property<double>("AtLeastPercentage")
                        .HasColumnType("float");

                    b.Property<double>("B")
                        .HasColumnType("float");

                    b.Property<double>("BPlus")
                        .HasColumnType("float");

                    b.Property<double>("C")
                        .HasColumnType("float");

                    b.Property<int>("CoreFail")
                        .HasColumnType("int");

                    b.Property<int>("CoreWithNoneCoreFail")
                        .HasColumnType("int");

                    b.Property<double>("D")
                        .HasColumnType("float");

                    b.Property<double>("E")
                        .HasColumnType("float");

                    b.Property<int>("ExamHeldID")
                        .HasColumnType("int");

                    b.Property<int>("NoneCoreFail")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ExamHeldID");

                    b.ToTable("ExamsRules");
                });

            modelBuilder.Entity("Models.ExpellDetail", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Conduct")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dues")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExpellType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastCampus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastClass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastSection")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Particular")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SLCNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentID")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("StudentID");

                    b.HasIndex("UserID");

                    b.ToTable("ExpellDetails");
                });

            modelBuilder.Entity("Models.FeeDiscount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("DiscountInAmount")
                        .HasColumnType("bit");

                    b.Property<string>("EditBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EditedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FeeTypeId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FeeTypeId");

                    b.HasIndex("StudentId");

                    b.ToTable("FeeDiscounts");
                });

            modelBuilder.Entity("Models.FeeGroup", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("FeeGroupName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("FeeGroups");
                });

            modelBuilder.Entity("Models.FeeSlip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdmissionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EditBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EditeOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ForMonth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastFineDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdmissionId");

                    b.ToTable("FeeSlips");
                });

            modelBuilder.Entity("Models.FeeSlipDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("DiscountInAmount")
                        .HasColumnType("bit");

                    b.Property<int>("FeeSlipId")
                        .HasColumnType("int");

                    b.Property<int>("FeeTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FeeSlipId");

                    b.HasIndex("FeeTypeId");

                    b.ToTable("FeeSlipDetails");
                });

            modelBuilder.Entity("Models.FeeSlipPaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AllowPartialPayment")
                        .HasColumnType("bit");

                    b.Property<int>("CampusID")
                        .HasColumnType("int");

                    b.Property<string>("PaymentMethodName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CampusID");

                    b.ToTable("FeeSlipPaymentMethods");
                });

            modelBuilder.Entity("Models.FeeSlipReceipt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("EditBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EditeOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FeeSlipId")
                        .HasColumnType("int");

                    b.Property<bool>("MessageSent")
                        .HasColumnType("bit");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FeeSlipId");

                    b.HasIndex("PaymentMethodId");

                    b.ToTable("FeeSlipReceipts");
                });

            modelBuilder.Entity("Models.FeeStructure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CampusID")
                        .HasColumnType("int");

                    b.Property<bool>("Deduction")
                        .HasColumnType("bit");

                    b.Property<DateTime>("EffectiveFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FeeGroupId")
                        .HasColumnType("int");

                    b.Property<int>("FeeTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastEditBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastEditedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Revised")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CampusID");

                    b.HasIndex("FeeGroupId");

                    b.HasIndex("FeeTypeId");

                    b.ToTable("FeeStructures");
                });

            modelBuilder.Entity("Models.FeeType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("AllowDiscount")
                        .HasColumnType("bit");

                    b.Property<bool?>("AllowEdit")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsOptional")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int");

                    b.Property<string>("TypeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FeeTypes");
                });

            modelBuilder.Entity("Models.FineDeduction", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Particular")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("StaffID")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("FineDeductions");
                });

            modelBuilder.Entity("Models.FreeAdmission", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("StudentID");

                    b.ToTable("FreeAdmissions");
                });

            modelBuilder.Entity("Models.Homework", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AttachDocument")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ClassSectionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("HomeworkDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClassSectionId");

                    b.HasIndex("SubjectId");

                    b.ToTable("Homework");
                });

            modelBuilder.Entity("Models.Hostel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CampusId")
                        .HasColumnType("int");

                    b.Property<string>("HostelName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TotalRooms")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TotalStudents")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CampusId");

                    b.ToTable("Hostel");
                });

            modelBuilder.Entity("Models.HostelAdmission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdmisionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("AdmissionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Fee")
                        .HasColumnType("int");

                    b.Property<int>("HostelId")
                        .HasColumnType("int");

                    b.Property<bool>("Isexpel")
                        .HasColumnType("bit");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdmisionId");

                    b.HasIndex("HostelId");

                    b.HasIndex("RoomId");

                    b.ToTable("HostelAdmissions");
                });

            modelBuilder.Entity("Models.HostelAttendance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AttendanceTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("HostelId")
                        .HasColumnType("int");

                    b.Property<int>("HostleAdmId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AttendanceTypeId");

                    b.HasIndex("HostelId");

                    b.HasIndex("HostleAdmId");

                    b.ToTable("HostelAttendances");
                });

            modelBuilder.Entity("Models.IssuedBoardCertificate", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Certificate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CertificateNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("IssuedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("IssuedTo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Level")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RollNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StdID")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("StdID");

                    b.HasIndex("UserID");

                    b.ToTable("IssuedBoardCertificates");
                });

            modelBuilder.Entity("Models.IssuedBook", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("BookCondition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BookID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("IssuedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("StaffID")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("StudentID")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("BookID");

                    b.HasIndex("StudentID");

                    b.HasIndex("UserID");

                    b.ToTable("IssuedBooks");
                });

            modelBuilder.Entity("Models.IssuedBooksToStaff", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("BookCondition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BookID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("IssuedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("StaffID")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("IssuedBooksToStaffs");
                });

            modelBuilder.Entity("Models.IssuedCertificate", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("CertificateType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentID")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("StudentID");

                    b.HasIndex("UserID");

                    b.ToTable("IssuedCertificates");
                });

            modelBuilder.Entity("Models.LeavedStaff", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("LeavingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StaffID")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("StaffID");

                    b.HasIndex("UserID");

                    b.ToTable("LeavedStaffs");
                });

            modelBuilder.Entity("Models.Library", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("CampusId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("ClosingTime")
                        .HasColumnType("time");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LibraryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("OpeningTime")
                        .HasColumnType("time");

                    b.HasKey("ID");

                    b.HasIndex("CampusId");

                    b.ToTable("Libraries");
                });

            modelBuilder.Entity("Models.LibraryBookList", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("AccessionNo")
                        .HasColumnType("int");

                    b.Property<string>("Author")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClassficationNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cornor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Edition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsIssuable")
                        .HasColumnType("bit");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pages")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PresentPosition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Price")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Publisher")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Source")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Translator")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VolumeNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("YearOfPublishing")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("LibraryBookLists");
                });

            modelBuilder.Entity("Models.LibraryBookRecord", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LibraryBookListId")
                        .HasColumnType("int");

                    b.Property<int>("LibraryId")
                        .HasColumnType("int");

                    b.Property<string>("ShelfNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.HasIndex("LibraryBookListId");

                    b.HasIndex("LibraryId");

                    b.ToTable("LibraryBookRecords");
                });

            modelBuilder.Entity("Models.LibraryIssuedBook", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("AspNetUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BookCondition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("IssuedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LibraryBookListID")
                        .HasColumnType("int");

                    b.Property<int>("LibraryBookRecordId")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("StudentID")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("AspNetUserId");

                    b.HasIndex("LibraryBookListID");

                    b.ToTable("LibraryIssuedBooks");
                });

            modelBuilder.Entity("Models.LibraryIssuedBooksToStaff", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("BookCondition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("IssuedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LibraryBookRecordId")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("StaffID")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("LibraryBookRecordId");

                    b.HasIndex("UserID");

                    b.ToTable("LibraryIssuedBooksToStaffs");
                });

            modelBuilder.Entity("Models.LibraryListOfBook", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("ClassID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Publisher")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("ClassID");

                    b.ToTable("LibraryListOfBooks");
                });

            modelBuilder.Entity("Models.ListOfBook", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("ClassID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Publisher")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("ClassID");

                    b.ToTable("ListOfBooks");
                });

            modelBuilder.Entity("Models.MenuAction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Controller")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("_Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MenuActions");
                });

            modelBuilder.Entity("Models.MenuItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActionId")
                        .HasColumnType("int");

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActionId");

                    b.ToTable("MenuItems");
                });

            modelBuilder.Entity("Models.MessageRecord", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("PerSMSCharge")
                        .HasColumnType("bit");

                    b.Property<int>("StudentID")
                        .HasColumnType("int");

                    b.Property<string>("TextMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("StudentID");

                    b.HasIndex("UserID");

                    b.ToTable("MessageRecords");
                });

            modelBuilder.Entity("Models.MobileDevice", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("DeviceTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastConnected")
                        .HasColumnType("datetime2");

                    b.Property<string>("SubscriptionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("MobileDevices");
                });

            modelBuilder.Entity("Models.MobileMessage", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FromId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MessageType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReadDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ToId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("FromId");

                    b.ToTable("MobileMessages");
                });

            modelBuilder.Entity("Models.Notification", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Data")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NotificationType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Receipients")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SentByUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SentOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ViewedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Models.OldJinnahian", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("CellNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DefaultCellNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Department")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Facebook")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomeAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("JoiningDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OfficeAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OfficePhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Photo")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ResidancePhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StudentID")
                        .HasColumnType("int");

                    b.Property<string>("Studied")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("remarks")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("StudentID");

                    b.ToTable("OldJinnahians");
                });

            modelBuilder.Entity("Models.ParentsVisit", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Particular")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentID")
                        .HasColumnType("int");

                    b.Property<string>("WhoVisited")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("StudentID");

                    b.ToTable("ParentsVisits");
                });

            modelBuilder.Entity("Models.PeriodMaster", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("PNo")
                        .HasColumnType("int");

                    b.Property<string>("Time")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("group")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("PeriodMasters");
                });

            modelBuilder.Entity("Models.Privlidge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActionId")
                        .HasColumnType("int");

                    b.Property<bool>("Allow")
                        .HasColumnType("bit");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ActionId");

                    b.ToTable("Privlidges");
                });

            modelBuilder.Entity("Models.ProfessionalTraining", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Grade")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Qualification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StaffID")
                        .HasColumnType("int");

                    b.Property<string>("University")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Year")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("StaffID");

                    b.HasIndex("UserID");

                    b.ToTable("ProfessionalTrainings");
                });

            modelBuilder.Entity("Models.ProhibitedMaterial", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Date")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Material")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("StudentID");

                    b.ToTable("ProhibitedMaterials");
                });

            modelBuilder.Entity("Models.PublicMobile", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GroupType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("VisibleToAllCampus")
                        .HasColumnType("bit");

                    b.Property<bool?>("VisibleToAllUser")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.ToTable("PublicMobiles");
                });

            modelBuilder.Entity("Models.Qualification", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Grade")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QualificationType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StaffID")
                        .HasColumnType("int");

                    b.Property<string>("University")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("StaffID");

                    b.HasIndex("UserID");

                    b.ToTable("Qualifications");
                });

            modelBuilder.Entity("Models.Rating", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("MasterID")
                        .HasColumnType("int");

                    b.Property<decimal?>("StaffID")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("Star")
                        .HasColumnType("int");

                    b.Property<int?>("Star1")
                        .HasColumnType("int");

                    b.Property<int?>("Star2")
                        .HasColumnType("int");

                    b.Property<int?>("Star3")
                        .HasColumnType("int");

                    b.Property<int?>("Star4")
                        .HasColumnType("int");

                    b.Property<int?>("Star5")
                        .HasColumnType("int");

                    b.Property<int?>("Total")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("MasterID");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("Models.RatingMaster", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("CampusID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CloseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RatingType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CampusID");

                    b.ToTable("RatingMasters");
                });

            modelBuilder.Entity("Models.RatingParticipant", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("AdmissionID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MasterID")
                        .HasColumnType("int");

                    b.Property<int?>("Rate")
                        .HasColumnType("int");

                    b.Property<decimal?>("StaffID")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("ID");

                    b.HasIndex("AdmissionID");

                    b.HasIndex("MasterID");

                    b.ToTable("RatingParticipants");
                });

            modelBuilder.Entity("Models.ReAdmission", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("AdmissionID")
                        .HasColumnType("int");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Particular")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("AdmissionID");

                    b.ToTable("ReAdmissions");
                });

            modelBuilder.Entity("Models.Result", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("AdmissionID")
                        .HasColumnType("int");

                    b.Property<string>("CheckedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ClassSubjectID")
                        .HasColumnType("int");

                    b.Property<int>("ExamHeldID")
                        .HasColumnType("int");

                    b.Property<double>("ObtainedMarks")
                        .HasColumnType("float");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("AdmissionID");

                    b.HasIndex("ClassSubjectID");

                    b.HasIndex("ExamHeldID");

                    b.HasIndex("UserID");

                    b.ToTable("Results");
                });

            modelBuilder.Entity("Models.ResultSummary", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int?>("Appeared")
                        .HasColumnType("int");

                    b.Property<int?>("C1")
                        .HasColumnType("int");

                    b.Property<int?>("C2")
                        .HasColumnType("int");

                    b.Property<int?>("C3")
                        .HasColumnType("int");

                    b.Property<string>("CampusName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClassName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Enrollment")
                        .HasColumnType("int");

                    b.Property<int>("ExamHeldID")
                        .HasColumnType("int");

                    b.Property<int?>("Fail")
                        .HasColumnType("int");

                    b.Property<double?>("Percentage")
                        .HasColumnType("float");

                    b.Property<int?>("S1")
                        .HasColumnType("int");

                    b.Property<int?>("S2")
                        .HasColumnType("int");

                    b.Property<int?>("S3")
                        .HasColumnType("int");

                    b.Property<int?>("SB1")
                        .HasColumnType("int");

                    b.Property<int?>("SB2")
                        .HasColumnType("int");

                    b.Property<int?>("SB3")
                        .HasColumnType("int");

                    b.Property<string>("SectionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Success")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ExamHeldID");

                    b.ToTable("ResultSummaries");
                });

            modelBuilder.Entity("Models.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Capacity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Floor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HostelId")
                        .HasColumnType("int");

                    b.Property<int>("RoomNo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HostelId");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("Models.SLC", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ExpellDetailID")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("ExpellDetailID");

                    b.ToTable("SLCs");
                });

            modelBuilder.Entity("Models.SMSApplicationProperty", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("CampusID")
                        .HasColumnType("int");

                    b.Property<string>("PropertyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PropertyValue")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CampusID");

                    b.ToTable("SMSApplicationProperty");
                });

            modelBuilder.Entity("Models.SchoolInfo", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Logo")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Mobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SchoolName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("SchoolInfoes");
                });

            modelBuilder.Entity("Models.SchoolLeaveSchedule", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("CampusID")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsHoliday")
                        .HasColumnType("bit");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.Property<string>("holidayName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CampusID");

                    b.ToTable("SchoolLeaveSchedule");
                });

            modelBuilder.Entity("Models.SchoolLogo", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<byte[]>("LOGO")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("ID");

                    b.ToTable("SchoolLogo");
                });

            modelBuilder.Entity("Models.ScienceLabItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("ItemName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("ScienceLabItems");
                });

            modelBuilder.Entity("Models.ScienceLabItemsStock", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("CampusID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("LIID")
                        .HasColumnType("int");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<string>("Quantity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Size")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Stock")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CampusID");

                    b.HasIndex("LIID");

                    b.ToTable("ScienceLabItemsStocks");
                });

            modelBuilder.Entity("Models.ScienceLabMissingItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("CampusID")
                        .HasColumnType("int");

                    b.Property<string>("Demand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LIID")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Size")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CampusID");

                    b.HasIndex("LIID");

                    b.ToTable("ScienceLabMissingItems");
                });

            modelBuilder.Entity("Models.Section", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("SectionName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("Models.SelectedForCadetCollege", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("StudentID")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("StudentID");

                    b.HasIndex("UserID");

                    b.ToTable("SelectedForCadetColleges");
                });

            modelBuilder.Entity("Models.SignatureSpeciman", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<byte[]>("FatherSign")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("GaurdianSign")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("StudentID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("StudentID");

                    b.ToTable("SignatureSpeciman");
                });

            modelBuilder.Entity("Models.Student", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("AdmissionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AdmittedClass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ApplyLateFee")
                        .HasColumnType("int");

                    b.Property<string>("CNIC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<string>("DateForSubmission")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Domicile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FatherAlive")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FatherDepartment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FatherNatureOfJob")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("FatherPhoto")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FatherProfession")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FatherQualification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("FeeDiscount")
                        .HasColumnType("float");

                    b.Property<string>("Games")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GeneralRemarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GuardianName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastEditedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastEditedOn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastIntitution")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LiveWith")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MissingDocuments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotherName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotherProfession")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotherQualification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotherTongue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nationality")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OfficeTelephone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PermenantAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RegistrationNo")
                        .HasColumnType("int");

                    b.Property<string>("Religion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResidanceTelephone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sex")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StdRelation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentCNIC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Models.StudentAlumni", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Campus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CellNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DefaultCellNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Department")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Facebook")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomeAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("JoiningDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OfficeAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OfficePhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Photo")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ResidancePhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StudentID")
                        .HasColumnType("int");

                    b.Property<string>("Studied")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("remarks")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("StudentID");

                    b.ToTable("StudentAlumnis");
                });

            modelBuilder.Entity("Models.StudentAttendanceType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("AttendanceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Fine")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.ToTable("StudentAttendanceTypes");
                });

            modelBuilder.Entity("Models.StudentAttendence", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("AdmissionID")
                        .HasColumnType("int");

                    b.Property<DateTime>("AttendanceDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("AttendanceTypeID")
                        .HasColumnType("int");

                    b.Property<double>("FineAmount")
                        .HasColumnType("float");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool?>("manaual")
                        .HasColumnType("bit");

                    b.Property<bool?>("sendmessage")
                        .HasColumnType("bit");

                    b.HasKey("ID");

                    b.HasIndex("AdmissionID");

                    b.HasIndex("AttendanceTypeID");

                    b.HasIndex("UserID");

                    b.ToTable("StudentAttendences");
                });

            modelBuilder.Entity("Models.StudentComplaign", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Ctype")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("EmployeeId")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Particular")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("StudentID");

                    b.ToTable("StudentComplaigns");
                });

            modelBuilder.Entity("Models.StudentMobile", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("MobileHolder")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Relation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("StudentID");

                    b.ToTable("StudentMobiles");
                });

            modelBuilder.Entity("Models.StudentPhoto", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<bool>("IsReplaced")
                        .HasColumnType("bit");

                    b.Property<string>("PhotoYear")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentID")
                        .HasColumnType("int");

                    b.Property<byte[]>("StudentImage")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("ID");

                    b.HasIndex("StudentID");

                    b.ToTable("StudentPhotos");
                });

            modelBuilder.Entity("Models.StudentPreviousEducation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("AdmissionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("AdmissionID")
                        .HasColumnType("int");

                    b.Property<string>("Grade")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ObtainedMarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreviousBoard")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreviousGroup")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RollNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Session")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("YearOfPassing")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AdmissionID");

                    b.ToTable("StudentPreviousEducations");
                });

            modelBuilder.Entity("Models.StudentThumbImpression", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("Finger")
                        .HasColumnType("int");

                    b.Property<int>("StudentID")
                        .HasColumnType("int");

                    b.Property<string>("Thumb")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("StudentID");

                    b.ToTable("StudentThumbImpressions");
                });

            modelBuilder.Entity("Models.StudentsTransport", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Closed")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DriverID")
                        .HasColumnType("int");

                    b.Property<double>("Fare")
                        .HasColumnType("float");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("bit");

                    b.Property<string>("PickPoint")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PickTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Started")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentID")
                        .HasColumnType("int");

                    b.Property<string>("TripNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("DriverID");

                    b.HasIndex("StudentID");

                    b.ToTable("StudentsTransports");
                });

            modelBuilder.Entity("Models.StudentsWarning", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentID")
                        .HasColumnType("int");

                    b.Property<string>("WarningNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("StudentID");

                    b.ToTable("StudentsWarnings");
                });

            modelBuilder.Entity("Models.Subject", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<bool>("IsCoreSubject")
                        .HasColumnType("bit");

                    b.Property<string>("SubjectName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("Models.TaskDairy", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("EntryBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Task")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("TaskDairies");
                });

            modelBuilder.Entity("Models.TeachingClass", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("ClassSectionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal>("StaffID")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("ClassSectionId");

                    b.ToTable("TeachingClasses");
                });

            modelBuilder.Entity("Models.TeachingSubject", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("CampusID")
                        .HasColumnType("int");

                    b.Property<int>("ClassSectionID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CloseDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StaffID")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CampusID");

                    b.HasIndex("ClassSectionID");

                    b.HasIndex("StaffID");

                    b.HasIndex("SubjectId");

                    b.ToTable("TeachingSubject");
                });

            modelBuilder.Entity("Models.TimeConsumptionForResultEntry", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("CampusID")
                        .HasColumnType("int");

                    b.Property<int>("ClassID")
                        .HasColumnType("int");

                    b.Property<int>("ClassSubjectID")
                        .HasColumnType("int");

                    b.Property<int>("ExamHeldID")
                        .HasColumnType("int");

                    b.Property<int>("LHour")
                        .HasColumnType("int");

                    b.Property<int>("LMinute")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("TimeConsumptionForResultEntries");
                });

            modelBuilder.Entity("Models.TimeTable", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("CampusID")
                        .HasColumnType("int");

                    b.Property<string>("CampusName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ClassID")
                        .HasColumnType("int");

                    b.Property<string>("ClassName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ParentID")
                        .HasColumnType("int");

                    b.Property<int>("Pno")
                        .HasColumnType("int");

                    b.Property<int>("SectionID")
                        .HasColumnType("int");

                    b.Property<string>("SectionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StaffID")
                        .HasColumnType("int");

                    b.Property<int>("SubjectID")
                        .HasColumnType("int");

                    b.Property<string>("SubjectName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TimeFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeTo")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("TimeTable");
                });

            modelBuilder.Entity("Models.UnwantedClient", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("CNIC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StdID")
                        .HasColumnType("int");

                    b.Property<int?>("StudentID")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("StudentID");

                    b.HasIndex("UserID");

                    b.ToTable("UnwantedClients");
                });

            modelBuilder.Entity("Models.UserDefinition", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("FK")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("UserDefinitions");
                });

            modelBuilder.Entity("Models.Visitor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CampusId")
                        .HasColumnType("int");

                    b.Property<string>("Cnic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Contact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("HostelAdmissionId")
                        .HasColumnType("int");

                    b.Property<int?>("HostelId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Relationship")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentRegNo")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VistorType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HostelAdmissionId");

                    b.HasIndex("HostelId");

                    b.ToTable("Visitors");
                });

            modelBuilder.Entity("Models.VoteByStudent", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<decimal>("StaffID")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Vote")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("VoteByStudents");
                });

            modelBuilder.Entity("Models.WebSite", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WebLink")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("WebSites");
                });

            modelBuilder.Entity("Models.tbl_AccountGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountGroupName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AffectGrossProfit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CrDr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("GroupUnder")
                        .HasColumnType("int");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Narration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbl_AccountGroup");
                });

            modelBuilder.Entity("Models.tbl_AccountLedger", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountGroupId")
                        .HasColumnType("int");

                    b.Property<string>("AccountNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BranchCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BranchName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CrOrDr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("CreditLimit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CreditPeriod")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("LedgerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MailingName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Narration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("OpeningBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountGroupId");

                    b.ToTable("tbl_AccountLedger");
                });

            modelBuilder.Entity("Models.tbl_BudgetDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BudgetMasterId")
                        .HasColumnType("int");

                    b.Property<string>("CrDr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Credit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Debit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("LedgerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BudgetMasterId");

                    b.ToTable("BudgetDetails");
                });

            modelBuilder.Entity("Models.tbl_BudgetMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BudgetName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CampusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Narration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BudgetMasters");
                });

            modelBuilder.Entity("Models.tbl_Company", b =>
                {
                    b.Property<int>("companyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("companyId"));

                    b.Property<string>("address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("booksBeginingFrom")
                        .HasColumnType("datetime2");

                    b.Property<string>("companyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("cst")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("currencyId")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("currentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("emailId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("extra1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("extra2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("extraDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("financialYearFrom")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("logo")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("mailingName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("mobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pan")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("state")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("tin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("web")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("companyId");

                    b.ToTable("tbl_Company");
                });

            modelBuilder.Entity("Models.tbl_Designation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("designationId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("advanceAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("designationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("extra1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("extra2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("extraDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("leaveDays")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("narration")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbl_Designation");
                });

            modelBuilder.Entity("Models.tbl_Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CNIC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CampusID")
                        .HasColumnType("int");

                    b.Property<string>("FatherName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Photo")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bankAccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bankName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bloodGroup")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("branchCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("branchName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("dailyWage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("defaultPackageId")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("designationId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("dob")
                        .HasColumnType("datetime2");

                    b.Property<string>("email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("employeeCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("employeeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("esiNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("extra1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("extra2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("extraDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("isActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("joiningDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("labourCardExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("labourCardNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("maritalStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("mobileNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("narration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("panNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("passportExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("passportNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pfNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("qualification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("salaryType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("terminationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("visaExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("visaNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CampusID");

                    b.HasIndex("designationId");

                    b.ToTable("tbl_Employee");
                });

            modelBuilder.Entity("Models.tbl_ExpenseDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ExpenseMasterId")
                        .HasColumnType("int");

                    b.Property<int>("LedgerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExpenseMasterId");

                    b.HasIndex("LedgerId");

                    b.ToTable("ExpenseDetails");
                });

            modelBuilder.Entity("Models.tbl_ExpenseMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CampusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ChequeDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChequeNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LedgerId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Narration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("VocherDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("VoucherTypeId")
                        .HasColumnType("int");

                    b.Property<string>("invoiceNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("voucherNo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LedgerId");

                    b.HasIndex("VoucherTypeId");

                    b.ToTable("ExpenseMasters");
                });

            modelBuilder.Entity("Models.tbl_FinancialYear", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCurrent")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("financialYearId")
                        .HasColumnType("int");

                    b.Property<DateTime>("fromDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("toDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("tbl_FinancialYear");
                });

            modelBuilder.Entity("Models.tbl_JournalDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Credit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Debit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("JournalMasterId")
                        .HasColumnType("int");

                    b.Property<int>("LedgerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("JournalMasterId");

                    b.HasIndex("LedgerId");

                    b.ToTable("JournalDetails");
                });

            modelBuilder.Entity("Models.tbl_JournalMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CampusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ChequeDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChequeNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LedgerId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Narration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("VocherDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("VoucherTypeId")
                        .HasColumnType("int");

                    b.Property<string>("invoiceNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("voucherNo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LedgerId");

                    b.HasIndex("VoucherTypeId");

                    b.ToTable("JournalMasters");
                });

            modelBuilder.Entity("Models.tbl_LedgerPosting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CampusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("chequeDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("chequeNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("credit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("debit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("detailsId")
                        .HasColumnType("int");

                    b.Property<string>("invoiceNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ledgerId")
                        .HasColumnType("int");

                    b.Property<string>("voucherNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("voucherTypeId")
                        .HasColumnType("int");

                    b.Property<int>("yearId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("LedgerPostings");
                });

            modelBuilder.Entity("Models.tbl_MonthlySalary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ForMonth")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SalaryPackageId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("SalaryPackageId");

                    b.ToTable("tbl_MonthlySalary");
                });

            modelBuilder.Entity("Models.tbl_MonthlySalaryDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("MonthlySalaryId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PayHeadId")
                        .HasColumnType("int");

                    b.Property<int>("type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MonthlySalaryId");

                    b.HasIndex("PayHeadId");

                    b.ToTable("tbl_MonthlySalaryDetails");
                });

            modelBuilder.Entity("Models.tbl_PayHead", b =>
                {
                    b.Property<int>("payHeadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("payHeadId"));

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("narration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("payHeadName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("type")
                        .HasColumnType("int");

                    b.HasKey("payHeadId");

                    b.ToTable("tbl_PayHead");
                });

            modelBuilder.Entity("Models.tbl_PaymentDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("LedgerId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentMasterId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LedgerId");

                    b.HasIndex("PaymentMasterId");

                    b.ToTable("PaymentDetails");
                });

            modelBuilder.Entity("Models.tbl_PaymentMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CampusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ChequeDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChequeNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LedgerId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Narration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("VocherDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("VoucherTypeId")
                        .HasColumnType("int");

                    b.Property<string>("invoiceNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("voucherNo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LedgerId");

                    b.HasIndex("VoucherTypeId");

                    b.ToTable("PaymentMasters");
                });

            modelBuilder.Entity("Models.tbl_ReceiptDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("LedgerId")
                        .HasColumnType("int");

                    b.Property<int>("ReceiptMasterId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LedgerId");

                    b.HasIndex("ReceiptMasterId");

                    b.ToTable("ReceiptDetails");
                });

            modelBuilder.Entity("Models.tbl_ReceiptMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CampusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ChequeDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChequeNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LedgerId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Narration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("VocherDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("VoucherTypeId")
                        .HasColumnType("int");

                    b.Property<string>("invoiceNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("voucherNo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LedgerId");

                    b.HasIndex("VoucherTypeId");

                    b.ToTable("ReceiptMasters");
                });

            modelBuilder.Entity("Models.tbl_SalaryPackage", b =>
                {
                    b.Property<int>("salaryPackageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("salaryPackageId"));

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("narration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("salaryPackageName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("salaryPackageId");

                    b.ToTable("tbl_SalaryPackage");
                });

            modelBuilder.Entity("Models.tbl_SalaryPackageDetails", b =>
                {
                    b.Property<int>("salaryPackageDetailsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("salaryPackageDetailsId"));

                    b.Property<decimal>("amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("narration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("payHeadId")
                        .HasColumnType("int");

                    b.Property<int>("salaryPackageId")
                        .HasColumnType("int");

                    b.HasKey("salaryPackageDetailsId");

                    b.HasIndex("payHeadId");

                    b.HasIndex("salaryPackageId");

                    b.ToTable("tbl_SalaryPackageDetails");
                });

            modelBuilder.Entity("Models.tbl_SalaryPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ChequeDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Chequenumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LedgerId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("MonthlySalaryId")
                        .HasColumnType("int");

                    b.Property<string>("Narration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VoucherNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VoucherTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LedgerId");

                    b.HasIndex("MonthlySalaryId");

                    b.HasIndex("VoucherTypeId");

                    b.ToTable("tbl_SalaryPayment");
                });

            modelBuilder.Entity("Models.tbl_VoucherType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Declaration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Heading1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Heading2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Heading3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Heading4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTaxApplicable")
                        .HasColumnType("bit");

                    b.Property<int>("MasterId")
                        .HasColumnType("int");

                    b.Property<string>("MethodOfVoucherNumbering")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Narration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeOfVoucher")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VoucherTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("tbl_VoucherType");
                });

            modelBuilder.Entity("PublicContentPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DetailImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("PostCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("PostContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreviewImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PostCategoryId");

                    b.ToTable("PublicPosts");
                });

            modelBuilder.Entity("PublicMenu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<string>("MenuGroup")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PublicMenus");
                });

            modelBuilder.Entity("PublicPage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("PageContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PageName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PageTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PublicPages");
                });

            modelBuilder.Entity("PublicPostCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PublicPostCategories");
                });

            modelBuilder.Entity("PublicSlider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ButtonText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ButtonUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstLine")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecondLine")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SliderGroup")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThirdLine")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PublicSliders");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.AddmissionWaitingList", b =>
                {
                    b.HasOne("Models.Campus", "Campus")
                        .WithMany("AddmissionWaitingLists")
                        .HasForeignKey("CampusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Class", "Class")
                        .WithMany("AddmissionWaitingLists")
                        .HasForeignKey("ClassID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campus");

                    b.Navigation("Class");
                });

            modelBuilder.Entity("Models.Admission", b =>
                {
                    b.HasOne("Models.Campus", "Campus")
                        .WithMany("Admissions")
                        .HasForeignKey("CampuseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.ClassSection", "ClassSection")
                        .WithMany("Admissions")
                        .HasForeignKey("ClassSectionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Student", "Student")
                        .WithMany("Admissions")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campus");

                    b.Navigation("ClassSection");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Models.ApplicationLeave", b =>
                {
                    b.HasOne("Models.tbl_Employee", "tbl_Employee")
                        .WithMany()
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("tbl_Employee");
                });

            modelBuilder.Entity("Models.CallRecord", b =>
                {
                    b.HasOne("Models.Admission", "Admission")
                        .WithMany("CallRecords")
                        .HasForeignKey("AdmissionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admission");
                });

            modelBuilder.Entity("Models.CampusUser", b =>
                {
                    b.HasOne("Models.Campus", "Campus")
                        .WithMany("CampusUsers")
                        .HasForeignKey("CampusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.ApplicationUser", "AspNetUser")
                        .WithMany("CampusUsers")
                        .HasForeignKey("UserID");

                    b.Navigation("AspNetUser");

                    b.Navigation("Campus");
                });

            modelBuilder.Entity("Models.ClassFeeGroup", b =>
                {
                    b.HasOne("Models.Campus", "Campus")
                        .WithMany("ClassFeeGroups")
                        .HasForeignKey("CampusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Class", "Class")
                        .WithMany("ClassFeeGroups")
                        .HasForeignKey("ClassID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.FeeGroup", "FeeGroup")
                        .WithMany("ClassFeeGroups")
                        .HasForeignKey("FeeGroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campus");

                    b.Navigation("Class");

                    b.Navigation("FeeGroup");
                });

            modelBuilder.Entity("Models.ClassSection", b =>
                {
                    b.HasOne("Models.Campus", "Campus")
                        .WithMany("ClassSections")
                        .HasForeignKey("CampusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Class", "Class")
                        .WithMany("ClassSections")
                        .HasForeignKey("ClassID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Section", "Section")
                        .WithMany("ClassSections")
                        .HasForeignKey("SectionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campus");

                    b.Navigation("Class");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("Models.ClassSubject", b =>
                {
                    b.HasOne("Models.Campus", "Campus")
                        .WithMany("ClassSubjects")
                        .HasForeignKey("CampusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Class", "Class")
                        .WithMany("ClassSubjects")
                        .HasForeignKey("ClassID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Subject", "Subject")
                        .WithMany("ClassSubjects")
                        .HasForeignKey("SubjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campus");

                    b.Navigation("Class");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Models.ComSub", b =>
                {
                    b.HasOne("Models.Student", "Student")
                        .WithMany("ComSubs")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Models.DOBChanx", b =>
                {
                    b.HasOne("Models.Student", "Student")
                        .WithMany("DOBChanges")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.ApplicationUser", "AspNetUser")
                        .WithMany("DOBChanges")
                        .HasForeignKey("UserID");

                    b.Navigation("AspNetUser");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Models.Driver", b =>
                {
                    b.HasOne("Models.Campus", "Campus")
                        .WithMany("Drivers")
                        .HasForeignKey("CampusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campus");
                });

            modelBuilder.Entity("Models.EmployeeAttendance", b =>
                {
                    b.HasOne("Models.EmployeeAttendanceType", "EmployeeAttendanceType")
                        .WithMany("EmployeeAttendances")
                        .HasForeignKey("AttendanceTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.tbl_Employee", "tbl_Employee")
                        .WithMany("EmployeeAttendances")
                        .HasForeignKey("StaffID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.ApplicationUser", "AspNetUser")
                        .WithMany("EmployeeAttendances")
                        .HasForeignKey("UserID");

                    b.Navigation("AspNetUser");

                    b.Navigation("EmployeeAttendanceType");

                    b.Navigation("tbl_Employee");
                });

            modelBuilder.Entity("Models.EmployeeAward", b =>
                {
                    b.HasOne("Models.ApplicationUser", "AspNetUser")
                        .WithMany("EmployeeAwards")
                        .HasForeignKey("UserID");

                    b.Navigation("AspNetUser");
                });

            modelBuilder.Entity("Models.EmployeeExperinceSubject", b =>
                {
                    b.HasOne("Models.tbl_Employee", "tbl_Employee")
                        .WithMany("EmployeeExperinceSubjects")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Subject", "Subject")
                        .WithMany("EmployeeExperinceSubjects")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");

                    b.Navigation("tbl_Employee");
                });

            modelBuilder.Entity("Models.EmployeeExprience", b =>
                {
                    b.HasOne("Models.tbl_Employee", "tbl_Employee")
                        .WithMany("EmployeeExpriences")
                        .HasForeignKey("StfID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("tbl_Employee");
                });

            modelBuilder.Entity("Models.EmployeeShortLeave", b =>
                {
                    b.HasOne("Models.tbl_Employee", "tbl_Employee")
                        .WithMany("EmployeeShortLeaves")
                        .HasForeignKey("StaffID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.ApplicationUser", "AspNetUser")
                        .WithMany("EmployeeShortLeaves")
                        .HasForeignKey("UserID");

                    b.Navigation("AspNetUser");

                    b.Navigation("tbl_Employee");
                });

            modelBuilder.Entity("Models.EmployeeThumbImpression", b =>
                {
                    b.HasOne("Models.tbl_Employee", "tbl_Employee")
                        .WithMany("EmployeeThumbImpressions")
                        .HasForeignKey("StaffID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("tbl_Employee");
                });

            modelBuilder.Entity("Models.ExamDate", b =>
                {
                    b.HasOne("Models.Campus", "Campus")
                        .WithMany("ExamDates")
                        .HasForeignKey("CampusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.ClassSection", "ClassSection")
                        .WithMany("ExamDates")
                        .HasForeignKey("ClassSectionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.ExamHeld", "ExamHeld")
                        .WithMany("ExamDates")
                        .HasForeignKey("ExamHeldID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Subject", "Subject")
                        .WithMany("ExamDates")
                        .HasForeignKey("SubjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campus");

                    b.Navigation("ClassSection");

                    b.Navigation("ExamHeld");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Models.ExamHeld", b =>
                {
                    b.HasOne("Models.Campus", "Campus")
                        .WithMany("ExamHelds")
                        .HasForeignKey("CampusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Exam", "Exam")
                        .WithMany("ExamHelds")
                        .HasForeignKey("ExamID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campus");

                    b.Navigation("Exam");
                });

            modelBuilder.Entity("Models.ExamRemark", b =>
                {
                    b.HasOne("Models.Admission", "Admission")
                        .WithMany("ExamRemarks")
                        .HasForeignKey("AdmissionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.ExamHeld", "ExamHeld")
                        .WithMany("ExamRemarks")
                        .HasForeignKey("ExamHeldID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.ApplicationUser", "AspNetUser")
                        .WithMany("ExamRemarks")
                        .HasForeignKey("UserID");

                    b.Navigation("Admission");

                    b.Navigation("AspNetUser");

                    b.Navigation("ExamHeld");
                });

            modelBuilder.Entity("Models.ExamsRule", b =>
                {
                    b.HasOne("Models.ExamHeld", "ExamHeld")
                        .WithMany("ExamsRules")
                        .HasForeignKey("ExamHeldID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExamHeld");
                });

            modelBuilder.Entity("Models.ExpellDetail", b =>
                {
                    b.HasOne("Models.Student", "Student")
                        .WithMany("ExpellDetails")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.ApplicationUser", "AspNetUser")
                        .WithMany("ExpellDetails")
                        .HasForeignKey("UserID");

                    b.Navigation("AspNetUser");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Models.FeeDiscount", b =>
                {
                    b.HasOne("Models.FeeType", "FeeType")
                        .WithMany("FeeDiscounts")
                        .HasForeignKey("FeeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Student", "Student")
                        .WithMany("FeeDiscounts")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FeeType");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Models.FeeSlip", b =>
                {
                    b.HasOne("Models.Admission", "Admission")
                        .WithMany("FeeSlips")
                        .HasForeignKey("AdmissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admission");
                });

            modelBuilder.Entity("Models.FeeSlipDetail", b =>
                {
                    b.HasOne("Models.FeeSlip", "FeeSlip")
                        .WithMany("FeeSlipDetails")
                        .HasForeignKey("FeeSlipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.FeeType", "FeeType")
                        .WithMany("FeeSlipDetails")
                        .HasForeignKey("FeeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FeeSlip");

                    b.Navigation("FeeType");
                });

            modelBuilder.Entity("Models.FeeSlipPaymentMethod", b =>
                {
                    b.HasOne("Models.Campus", "Campus")
                        .WithMany("FeeSlipPaymentMethods")
                        .HasForeignKey("CampusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campus");
                });

            modelBuilder.Entity("Models.FeeSlipReceipt", b =>
                {
                    b.HasOne("Models.FeeSlip", "FeeSlip")
                        .WithMany("FeeSlipReceipts")
                        .HasForeignKey("FeeSlipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.FeeSlipPaymentMethod", "FeeSlipPaymentMethod")
                        .WithMany("FeeSlipReceipts")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FeeSlip");

                    b.Navigation("FeeSlipPaymentMethod");
                });

            modelBuilder.Entity("Models.FeeStructure", b =>
                {
                    b.HasOne("Models.Campus", "Campus")
                        .WithMany("FeeStructures")
                        .HasForeignKey("CampusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.FeeGroup", "FeeGroup")
                        .WithMany("FeeStructures")
                        .HasForeignKey("FeeGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.FeeType", "FeeType")
                        .WithMany("FeeStructures")
                        .HasForeignKey("FeeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campus");

                    b.Navigation("FeeGroup");

                    b.Navigation("FeeType");
                });

            modelBuilder.Entity("Models.FineDeduction", b =>
                {
                    b.HasOne("Models.ApplicationUser", "AspNetUser")
                        .WithMany("FineDeductions")
                        .HasForeignKey("UserID");

                    b.Navigation("AspNetUser");
                });

            modelBuilder.Entity("Models.FreeAdmission", b =>
                {
                    b.HasOne("Models.Student", "Student")
                        .WithMany("FreeAdmissions")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Models.Homework", b =>
                {
                    b.HasOne("Models.ClassSection", "ClassSection")
                        .WithMany("Homework")
                        .HasForeignKey("ClassSectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Subject", "Subject")
                        .WithMany("Homework")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClassSection");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Models.Hostel", b =>
                {
                    b.HasOne("Models.Campus", "Campus")
                        .WithMany("Hostels")
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campus");
                });

            modelBuilder.Entity("Models.HostelAdmission", b =>
                {
                    b.HasOne("Models.Admission", "Admission")
                        .WithMany()
                        .HasForeignKey("AdmisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Hostel", "Hostel")
                        .WithMany("HostelAdmissions")
                        .HasForeignKey("HostelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Room", "Room")
                        .WithMany("HostelAdmissions")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admission");

                    b.Navigation("Hostel");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Models.HostelAttendance", b =>
                {
                    b.HasOne("Models.StudentAttendanceType", "StudentAttendanceType")
                        .WithMany("HostelAttendances")
                        .HasForeignKey("AttendanceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Hostel", "Hostel")
                        .WithMany("HostelAttendances")
                        .HasForeignKey("HostelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.HostelAdmission", "HostelAdmission")
                        .WithMany("HostelAttendances")
                        .HasForeignKey("HostleAdmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hostel");

                    b.Navigation("HostelAdmission");

                    b.Navigation("StudentAttendanceType");
                });

            modelBuilder.Entity("Models.IssuedBoardCertificate", b =>
                {
                    b.HasOne("Models.Student", "Student")
                        .WithMany("IssuedBoardCertificates")
                        .HasForeignKey("StdID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.ApplicationUser", "AspNetUser")
                        .WithMany("IssuedBoardCertificates")
                        .HasForeignKey("UserID");

                    b.Navigation("AspNetUser");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Models.IssuedBook", b =>
                {
                    b.HasOne("Models.Book", "Book")
                        .WithMany("IssuedBooks")
                        .HasForeignKey("BookID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Student", "Student")
                        .WithMany("IssuedBooks")
                        .HasForeignKey("StudentID");

                    b.HasOne("Models.ApplicationUser", "AspNetUser")
                        .WithMany("IssuedBooks")
                        .HasForeignKey("UserID");

                    b.Navigation("AspNetUser");

                    b.Navigation("Book");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Models.IssuedBooksToStaff", b =>
                {
                    b.HasOne("Models.ApplicationUser", "AspNetUser")
                        .WithMany("IssuedBooksToStaffs")
                        .HasForeignKey("UserID");

                    b.Navigation("AspNetUser");
                });

            modelBuilder.Entity("Models.IssuedCertificate", b =>
                {
                    b.HasOne("Models.Student", "Student")
                        .WithMany("IssuedCertificates")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.ApplicationUser", "AspNetUser")
                        .WithMany("IssuedCertificates")
                        .HasForeignKey("UserID");

                    b.Navigation("AspNetUser");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Models.LeavedStaff", b =>
                {
                    b.HasOne("Models.tbl_Employee", "tbl_Employee")
                        .WithMany("LeavedStaffs")
                        .HasForeignKey("StaffID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.ApplicationUser", "AspNetUser")
                        .WithMany("LeavedStaffs")
                        .HasForeignKey("UserID");

                    b.Navigation("AspNetUser");

                    b.Navigation("tbl_Employee");
                });

            modelBuilder.Entity("Models.Library", b =>
                {
                    b.HasOne("Models.Campus", "Campus")
                        .WithMany("Libraries")
                        .HasForeignKey("CampusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campus");
                });

            modelBuilder.Entity("Models.LibraryBookRecord", b =>
                {
                    b.HasOne("Models.LibraryBookList", "LibraryBookList")
                        .WithMany("LibraryBookRecords")
                        .HasForeignKey("LibraryBookListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Library", "Library")
                        .WithMany("LibraryBookRecords")
                        .HasForeignKey("LibraryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Library");

                    b.Navigation("LibraryBookList");
                });

            modelBuilder.Entity("Models.LibraryIssuedBook", b =>
                {
                    b.HasOne("Models.ApplicationUser", "AspNetUser")
                        .WithMany("LibraryIssuedBooks")
                        .HasForeignKey("AspNetUserId");

                    b.HasOne("Models.LibraryBookList", "LibraryBookList")
                        .WithMany("LibraryIssuedBooks")
                        .HasForeignKey("LibraryBookListID");

                    b.Navigation("AspNetUser");

                    b.Navigation("LibraryBookList");
                });

            modelBuilder.Entity("Models.LibraryIssuedBooksToStaff", b =>
                {
                    b.HasOne("Models.LibraryBookRecord", "LibraryBookRecord")
                        .WithMany("LibraryIssuedBooksToStaffs")
                        .HasForeignKey("LibraryBookRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.ApplicationUser", "AspNetUser")
                        .WithMany("LibraryIssuedBooksToStaffs")
                        .HasForeignKey("UserID");

                    b.Navigation("AspNetUser");

                    b.Navigation("LibraryBookRecord");
                });

            modelBuilder.Entity("Models.LibraryListOfBook", b =>
                {
                    b.HasOne("Models.Class", "Class")
                        .WithMany("LibraryListOfBooks")
                        .HasForeignKey("ClassID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");
                });

            modelBuilder.Entity("Models.ListOfBook", b =>
                {
                    b.HasOne("Models.Class", "Class")
                        .WithMany("ListOfBooks")
                        .HasForeignKey("ClassID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");
                });

            modelBuilder.Entity("Models.MenuItem", b =>
                {
                    b.HasOne("Models.MenuAction", "Action")
                        .WithMany("MenuItems")
                        .HasForeignKey("ActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Action");
                });

            modelBuilder.Entity("Models.MessageRecord", b =>
                {
                    b.HasOne("Models.Student", "Student")
                        .WithMany("MessageRecords")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.ApplicationUser", "AspNetUser")
                        .WithMany("MessageRecords")
                        .HasForeignKey("UserID");

                    b.Navigation("AspNetUser");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Models.MobileMessage", b =>
                {
                    b.HasOne("Models.ApplicationUser", "Author")
                        .WithMany()
                        .HasForeignKey("FromId");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Models.OldJinnahian", b =>
                {
                    b.HasOne("Models.Student", "Student")
                        .WithMany("OldJinnahians")
                        .HasForeignKey("StudentID");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Models.ParentsVisit", b =>
                {
                    b.HasOne("Models.Student", "Student")
                        .WithMany("ParentsVisits")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Models.Privlidge", b =>
                {
                    b.HasOne("Models.MenuAction", "Action")
                        .WithMany("Privlidges")
                        .HasForeignKey("ActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Action");
                });

            modelBuilder.Entity("Models.ProfessionalTraining", b =>
                {
                    b.HasOne("Models.tbl_Employee", "tbl_Employee")
                        .WithMany("ProfessionalTrainings")
                        .HasForeignKey("StaffID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.ApplicationUser", "AspNetUser")
                        .WithMany("ProfessionalTrainings")
                        .HasForeignKey("UserID");

                    b.Navigation("AspNetUser");

                    b.Navigation("tbl_Employee");
                });

            modelBuilder.Entity("Models.ProhibitedMaterial", b =>
                {
                    b.HasOne("Models.Student", "Student")
                        .WithMany("ProhibitedMaterials")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Models.Qualification", b =>
                {
                    b.HasOne("Models.tbl_Employee", "tbl_Employee")
                        .WithMany("Qualifications")
                        .HasForeignKey("StaffID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.ApplicationUser", "AspNetUser")
                        .WithMany("Qualifications")
                        .HasForeignKey("UserID");

                    b.Navigation("AspNetUser");

                    b.Navigation("tbl_Employee");
                });

            modelBuilder.Entity("Models.Rating", b =>
                {
                    b.HasOne("Models.RatingMaster", "RatingMaster")
                        .WithMany("Ratings")
                        .HasForeignKey("MasterID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RatingMaster");
                });

            modelBuilder.Entity("Models.RatingMaster", b =>
                {
                    b.HasOne("Models.Campus", "Campus")
                        .WithMany("RatingMasters")
                        .HasForeignKey("CampusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campus");
                });

            modelBuilder.Entity("Models.RatingParticipant", b =>
                {
                    b.HasOne("Models.Admission", "Admission")
                        .WithMany("RatingParticipants")
                        .HasForeignKey("AdmissionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.RatingMaster", "RatingMaster")
                        .WithMany("RatingParticipants")
                        .HasForeignKey("MasterID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admission");

                    b.Navigation("RatingMaster");
                });

            modelBuilder.Entity("Models.ReAdmission", b =>
                {
                    b.HasOne("Models.Admission", "Admission")
                        .WithMany("ReAdmissions")
                        .HasForeignKey("AdmissionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admission");
                });

            modelBuilder.Entity("Models.Result", b =>
                {
                    b.HasOne("Models.Admission", "Admission")
                        .WithMany("Results")
                        .HasForeignKey("AdmissionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.ClassSubject", "ClassSubject")
                        .WithMany("Results")
                        .HasForeignKey("ClassSubjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.ExamHeld", "ExamHeld")
                        .WithMany("Results")
                        .HasForeignKey("ExamHeldID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.ApplicationUser", "AspNetUser")
                        .WithMany("Results")
                        .HasForeignKey("UserID");

                    b.Navigation("Admission");

                    b.Navigation("AspNetUser");

                    b.Navigation("ClassSubject");

                    b.Navigation("ExamHeld");
                });

            modelBuilder.Entity("Models.ResultSummary", b =>
                {
                    b.HasOne("Models.ExamHeld", "ExamHeld")
                        .WithMany("ResultSummaries")
                        .HasForeignKey("ExamHeldID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExamHeld");
                });

            modelBuilder.Entity("Models.Room", b =>
                {
                    b.HasOne("Models.Hostel", "Hostel")
                        .WithMany("Rooms")
                        .HasForeignKey("HostelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hostel");
                });

            modelBuilder.Entity("Models.SLC", b =>
                {
                    b.HasOne("Models.ExpellDetail", "ExpellDetail")
                        .WithMany("SLCs")
                        .HasForeignKey("ExpellDetailID");

                    b.Navigation("ExpellDetail");
                });

            modelBuilder.Entity("Models.SMSApplicationProperty", b =>
                {
                    b.HasOne("Models.Campus", "Campus")
                        .WithMany("SMSApplicationProperties")
                        .HasForeignKey("CampusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campus");
                });

            modelBuilder.Entity("Models.SchoolLeaveSchedule", b =>
                {
                    b.HasOne("Models.Campus", "Campus")
                        .WithMany("SchoolLeaveSchedules")
                        .HasForeignKey("CampusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campus");
                });

            modelBuilder.Entity("Models.ScienceLabItemsStock", b =>
                {
                    b.HasOne("Models.Campus", "Campus")
                        .WithMany("ScienceLabItemsStocks")
                        .HasForeignKey("CampusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.ScienceLabItem", "ScienceLabItem")
                        .WithMany("ScienceLabItemsStocks")
                        .HasForeignKey("LIID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campus");

                    b.Navigation("ScienceLabItem");
                });

            modelBuilder.Entity("Models.ScienceLabMissingItem", b =>
                {
                    b.HasOne("Models.Campus", "Campus")
                        .WithMany("ScienceLabMissingItems")
                        .HasForeignKey("CampusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.ScienceLabItem", "ScienceLabItem")
                        .WithMany("ScienceLabMissingItems")
                        .HasForeignKey("LIID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campus");

                    b.Navigation("ScienceLabItem");
                });

            modelBuilder.Entity("Models.SelectedForCadetCollege", b =>
                {
                    b.HasOne("Models.Student", "Student")
                        .WithMany("SelectedForCadetColleges")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.ApplicationUser", "AspNetUser")
                        .WithMany("SelectedForCadetColleges")
                        .HasForeignKey("UserID");

                    b.Navigation("AspNetUser");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Models.SignatureSpeciman", b =>
                {
                    b.HasOne("Models.Student", "Student")
                        .WithMany("SignatureSpecimen")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Models.StudentAlumni", b =>
                {
                    b.HasOne("Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentID");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Models.StudentAttendence", b =>
                {
                    b.HasOne("Models.Admission", "Admission")
                        .WithMany("StudentAttendences")
                        .HasForeignKey("AdmissionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.StudentAttendanceType", "StudentAttendanceType")
                        .WithMany("StudentAttendences")
                        .HasForeignKey("AttendanceTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.ApplicationUser", "AspNetUser")
                        .WithMany("StudentAttendences")
                        .HasForeignKey("UserID");

                    b.Navigation("Admission");

                    b.Navigation("AspNetUser");

                    b.Navigation("StudentAttendanceType");
                });

            modelBuilder.Entity("Models.StudentComplaign", b =>
                {
                    b.HasOne("Models.Student", "Student")
                        .WithMany("StudentComplaigns")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Models.StudentMobile", b =>
                {
                    b.HasOne("Models.Student", "Student")
                        .WithMany("StudentMobiles")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Models.StudentPhoto", b =>
                {
                    b.HasOne("Models.Student", "Student")
                        .WithMany("StudentPhotos")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Models.StudentPreviousEducation", b =>
                {
                    b.HasOne("Models.Admission", "Admission")
                        .WithMany("StudentPreviousEducations")
                        .HasForeignKey("AdmissionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admission");
                });

            modelBuilder.Entity("Models.StudentThumbImpression", b =>
                {
                    b.HasOne("Models.Student", "Student")
                        .WithMany("StudentThumbImpressions")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Models.StudentsTransport", b =>
                {
                    b.HasOne("Models.Driver", "Driver")
                        .WithMany("StudentsTransports")
                        .HasForeignKey("DriverID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Student", "Student")
                        .WithMany("StudentsTransports")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Models.StudentsWarning", b =>
                {
                    b.HasOne("Models.Student", "Student")
                        .WithMany("StudentsWarnings")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Models.TeachingClass", b =>
                {
                    b.HasOne("Models.ClassSection", "ClassSection")
                        .WithMany()
                        .HasForeignKey("ClassSectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClassSection");
                });

            modelBuilder.Entity("Models.TeachingSubject", b =>
                {
                    b.HasOne("Models.Campus", "Campus")
                        .WithMany("TeachingSubjects")
                        .HasForeignKey("CampusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.ClassSection", "ClassSection")
                        .WithMany("TeachingSubjects")
                        .HasForeignKey("ClassSectionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.tbl_Employee", "tbl_Employee")
                        .WithMany("TeachingSubjects")
                        .HasForeignKey("StaffID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Subject", "Subject")
                        .WithMany("TeachingSubjects")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campus");

                    b.Navigation("ClassSection");

                    b.Navigation("Subject");

                    b.Navigation("tbl_Employee");
                });

            modelBuilder.Entity("Models.TimeConsumptionForResultEntry", b =>
                {
                    b.HasOne("Models.ApplicationUser", "AspNetUser")
                        .WithMany("TimeConsumptionForResultEntries")
                        .HasForeignKey("UserID");

                    b.Navigation("AspNetUser");
                });

            modelBuilder.Entity("Models.UnwantedClient", b =>
                {
                    b.HasOne("Models.Student", "Student")
                        .WithMany("UnwantedClients")
                        .HasForeignKey("StudentID");

                    b.HasOne("Models.ApplicationUser", "AspNetUser")
                        .WithMany("UnwantedClients")
                        .HasForeignKey("UserID");

                    b.Navigation("AspNetUser");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Models.Visitor", b =>
                {
                    b.HasOne("Models.HostelAdmission", null)
                        .WithMany("Visitors")
                        .HasForeignKey("HostelAdmissionId");

                    b.HasOne("Models.Hostel", null)
                        .WithMany("Visitors")
                        .HasForeignKey("HostelId");
                });

            modelBuilder.Entity("Models.tbl_AccountLedger", b =>
                {
                    b.HasOne("Models.tbl_AccountGroup", "tbl_AccountGroup")
                        .WithMany("tbl_AccountLedger")
                        .HasForeignKey("AccountGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("tbl_AccountGroup");
                });

            modelBuilder.Entity("Models.tbl_BudgetDetails", b =>
                {
                    b.HasOne("Models.tbl_BudgetMaster", "BudgetMaster")
                        .WithMany("BudgetDetails")
                        .HasForeignKey("BudgetMasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BudgetMaster");
                });

            modelBuilder.Entity("Models.tbl_Employee", b =>
                {
                    b.HasOne("Models.Campus", "Campus")
                        .WithMany("tbl_Employee")
                        .HasForeignKey("CampusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.tbl_Designation", "tbl_Designation")
                        .WithMany("tbl_Employee")
                        .HasForeignKey("designationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campus");

                    b.Navigation("tbl_Designation");
                });

            modelBuilder.Entity("Models.tbl_ExpenseDetails", b =>
                {
                    b.HasOne("Models.tbl_ExpenseMaster", "ExpenseMaster")
                        .WithMany("ExpenseDetails")
                        .HasForeignKey("ExpenseMasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.tbl_AccountLedger", "Ledger")
                        .WithMany()
                        .HasForeignKey("LedgerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExpenseMaster");

                    b.Navigation("Ledger");
                });

            modelBuilder.Entity("Models.tbl_ExpenseMaster", b =>
                {
                    b.HasOne("Models.tbl_AccountLedger", "Ledger")
                        .WithMany()
                        .HasForeignKey("LedgerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.tbl_VoucherType", "VoucherType")
                        .WithMany()
                        .HasForeignKey("VoucherTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ledger");

                    b.Navigation("VoucherType");
                });

            modelBuilder.Entity("Models.tbl_JournalDetails", b =>
                {
                    b.HasOne("Models.tbl_JournalMaster", "JournalMaster")
                        .WithMany("JournalDetails")
                        .HasForeignKey("JournalMasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.tbl_AccountLedger", "Ledger")
                        .WithMany()
                        .HasForeignKey("LedgerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JournalMaster");

                    b.Navigation("Ledger");
                });

            modelBuilder.Entity("Models.tbl_JournalMaster", b =>
                {
                    b.HasOne("Models.tbl_AccountLedger", "Ledger")
                        .WithMany()
                        .HasForeignKey("LedgerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.tbl_VoucherType", "VoucherType")
                        .WithMany()
                        .HasForeignKey("VoucherTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ledger");

                    b.Navigation("VoucherType");
                });

            modelBuilder.Entity("Models.tbl_MonthlySalary", b =>
                {
                    b.HasOne("Models.tbl_Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.tbl_SalaryPackage", "SalaryPackage")
                        .WithMany()
                        .HasForeignKey("SalaryPackageId");

                    b.Navigation("Employee");

                    b.Navigation("SalaryPackage");
                });

            modelBuilder.Entity("Models.tbl_MonthlySalaryDetails", b =>
                {
                    b.HasOne("Models.tbl_MonthlySalary", "MonthlySalary")
                        .WithMany("tbl_MonthlySalaryDetails")
                        .HasForeignKey("MonthlySalaryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.tbl_PayHead", "PayHead")
                        .WithMany()
                        .HasForeignKey("PayHeadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MonthlySalary");

                    b.Navigation("PayHead");
                });

            modelBuilder.Entity("Models.tbl_PaymentDetails", b =>
                {
                    b.HasOne("Models.tbl_AccountLedger", "Ledger")
                        .WithMany()
                        .HasForeignKey("LedgerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.tbl_PaymentMaster", "PaymentMaster")
                        .WithMany("PaymentDetails")
                        .HasForeignKey("PaymentMasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ledger");

                    b.Navigation("PaymentMaster");
                });

            modelBuilder.Entity("Models.tbl_PaymentMaster", b =>
                {
                    b.HasOne("Models.tbl_AccountLedger", "Ledger")
                        .WithMany()
                        .HasForeignKey("LedgerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.tbl_VoucherType", "VoucherType")
                        .WithMany()
                        .HasForeignKey("VoucherTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ledger");

                    b.Navigation("VoucherType");
                });

            modelBuilder.Entity("Models.tbl_ReceiptDetails", b =>
                {
                    b.HasOne("Models.tbl_AccountLedger", "Ledger")
                        .WithMany()
                        .HasForeignKey("LedgerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.tbl_ReceiptMaster", "ReceiptMaster")
                        .WithMany("ReceiptDetails")
                        .HasForeignKey("ReceiptMasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ledger");

                    b.Navigation("ReceiptMaster");
                });

            modelBuilder.Entity("Models.tbl_ReceiptMaster", b =>
                {
                    b.HasOne("Models.tbl_AccountLedger", "Ledger")
                        .WithMany()
                        .HasForeignKey("LedgerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.tbl_VoucherType", "VoucherType")
                        .WithMany()
                        .HasForeignKey("VoucherTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ledger");

                    b.Navigation("VoucherType");
                });

            modelBuilder.Entity("Models.tbl_SalaryPackageDetails", b =>
                {
                    b.HasOne("Models.tbl_PayHead", "PayHead")
                        .WithMany("SalaryPackageDetails")
                        .HasForeignKey("payHeadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.tbl_SalaryPackage", "SalaryPackage")
                        .WithMany("SalaryPackageDetails")
                        .HasForeignKey("salaryPackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PayHead");

                    b.Navigation("SalaryPackage");
                });

            modelBuilder.Entity("Models.tbl_SalaryPayment", b =>
                {
                    b.HasOne("Models.tbl_AccountLedger", "Ledger")
                        .WithMany()
                        .HasForeignKey("LedgerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.tbl_MonthlySalary", "MonthlySalary")
                        .WithMany("SalaryPayments")
                        .HasForeignKey("MonthlySalaryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.tbl_VoucherType", "VoucherType")
                        .WithMany()
                        .HasForeignKey("VoucherTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ledger");

                    b.Navigation("MonthlySalary");

                    b.Navigation("VoucherType");
                });

            modelBuilder.Entity("PublicContentPost", b =>
                {
                    b.HasOne("PublicPostCategory", "PostCategory")
                        .WithMany("ContentPosts")
                        .HasForeignKey("PostCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PostCategory");
                });

            modelBuilder.Entity("Models.Admission", b =>
                {
                    b.Navigation("CallRecords");

                    b.Navigation("ExamRemarks");

                    b.Navigation("FeeSlips");

                    b.Navigation("RatingParticipants");

                    b.Navigation("ReAdmissions");

                    b.Navigation("Results");

                    b.Navigation("StudentAttendences");

                    b.Navigation("StudentPreviousEducations");
                });

            modelBuilder.Entity("Models.ApplicationUser", b =>
                {
                    b.Navigation("CampusUsers");

                    b.Navigation("DOBChanges");

                    b.Navigation("EmployeeAttendances");

                    b.Navigation("EmployeeAwards");

                    b.Navigation("EmployeeShortLeaves");

                    b.Navigation("ExamRemarks");

                    b.Navigation("ExpellDetails");

                    b.Navigation("FineDeductions");

                    b.Navigation("IssuedBoardCertificates");

                    b.Navigation("IssuedBooks");

                    b.Navigation("IssuedBooksToStaffs");

                    b.Navigation("IssuedCertificates");

                    b.Navigation("LeavedStaffs");

                    b.Navigation("LibraryIssuedBooks");

                    b.Navigation("LibraryIssuedBooksToStaffs");

                    b.Navigation("MessageRecords");

                    b.Navigation("ProfessionalTrainings");

                    b.Navigation("Qualifications");

                    b.Navigation("Results");

                    b.Navigation("SelectedForCadetColleges");

                    b.Navigation("StudentAttendences");

                    b.Navigation("TimeConsumptionForResultEntries");

                    b.Navigation("UnwantedClients");
                });

            modelBuilder.Entity("Models.Book", b =>
                {
                    b.Navigation("IssuedBooks");
                });

            modelBuilder.Entity("Models.Campus", b =>
                {
                    b.Navigation("AddmissionWaitingLists");

                    b.Navigation("Admissions");

                    b.Navigation("CampusUsers");

                    b.Navigation("ClassFeeGroups");

                    b.Navigation("ClassSections");

                    b.Navigation("ClassSubjects");

                    b.Navigation("Drivers");

                    b.Navigation("ExamDates");

                    b.Navigation("ExamHelds");

                    b.Navigation("FeeSlipPaymentMethods");

                    b.Navigation("FeeStructures");

                    b.Navigation("Hostels");

                    b.Navigation("Libraries");

                    b.Navigation("RatingMasters");

                    b.Navigation("SMSApplicationProperties");

                    b.Navigation("SchoolLeaveSchedules");

                    b.Navigation("ScienceLabItemsStocks");

                    b.Navigation("ScienceLabMissingItems");

                    b.Navigation("TeachingSubjects");

                    b.Navigation("tbl_Employee");
                });

            modelBuilder.Entity("Models.Class", b =>
                {
                    b.Navigation("AddmissionWaitingLists");

                    b.Navigation("ClassFeeGroups");

                    b.Navigation("ClassSections");

                    b.Navigation("ClassSubjects");

                    b.Navigation("LibraryListOfBooks");

                    b.Navigation("ListOfBooks");
                });

            modelBuilder.Entity("Models.ClassSection", b =>
                {
                    b.Navigation("Admissions");

                    b.Navigation("ExamDates");

                    b.Navigation("Homework");

                    b.Navigation("TeachingSubjects");
                });

            modelBuilder.Entity("Models.ClassSubject", b =>
                {
                    b.Navigation("Results");
                });

            modelBuilder.Entity("Models.Driver", b =>
                {
                    b.Navigation("StudentsTransports");
                });

            modelBuilder.Entity("Models.EmployeeAttendanceType", b =>
                {
                    b.Navigation("EmployeeAttendances");
                });

            modelBuilder.Entity("Models.Exam", b =>
                {
                    b.Navigation("ExamHelds");
                });

            modelBuilder.Entity("Models.ExamHeld", b =>
                {
                    b.Navigation("ExamDates");

                    b.Navigation("ExamRemarks");

                    b.Navigation("ExamsRules");

                    b.Navigation("ResultSummaries");

                    b.Navigation("Results");
                });

            modelBuilder.Entity("Models.ExpellDetail", b =>
                {
                    b.Navigation("SLCs");
                });

            modelBuilder.Entity("Models.FeeGroup", b =>
                {
                    b.Navigation("ClassFeeGroups");

                    b.Navigation("FeeStructures");
                });

            modelBuilder.Entity("Models.FeeSlip", b =>
                {
                    b.Navigation("FeeSlipDetails");

                    b.Navigation("FeeSlipReceipts");
                });

            modelBuilder.Entity("Models.FeeSlipPaymentMethod", b =>
                {
                    b.Navigation("FeeSlipReceipts");
                });

            modelBuilder.Entity("Models.FeeType", b =>
                {
                    b.Navigation("FeeDiscounts");

                    b.Navigation("FeeSlipDetails");

                    b.Navigation("FeeStructures");
                });

            modelBuilder.Entity("Models.Hostel", b =>
                {
                    b.Navigation("HostelAdmissions");

                    b.Navigation("HostelAttendances");

                    b.Navigation("Rooms");

                    b.Navigation("Visitors");
                });

            modelBuilder.Entity("Models.HostelAdmission", b =>
                {
                    b.Navigation("HostelAttendances");

                    b.Navigation("Visitors");
                });

            modelBuilder.Entity("Models.Library", b =>
                {
                    b.Navigation("LibraryBookRecords");
                });

            modelBuilder.Entity("Models.LibraryBookList", b =>
                {
                    b.Navigation("LibraryBookRecords");

                    b.Navigation("LibraryIssuedBooks");
                });

            modelBuilder.Entity("Models.LibraryBookRecord", b =>
                {
                    b.Navigation("LibraryIssuedBooksToStaffs");
                });

            modelBuilder.Entity("Models.MenuAction", b =>
                {
                    b.Navigation("MenuItems");

                    b.Navigation("Privlidges");
                });

            modelBuilder.Entity("Models.RatingMaster", b =>
                {
                    b.Navigation("RatingParticipants");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("Models.Room", b =>
                {
                    b.Navigation("HostelAdmissions");
                });

            modelBuilder.Entity("Models.ScienceLabItem", b =>
                {
                    b.Navigation("ScienceLabItemsStocks");

                    b.Navigation("ScienceLabMissingItems");
                });

            modelBuilder.Entity("Models.Section", b =>
                {
                    b.Navigation("ClassSections");
                });

            modelBuilder.Entity("Models.Student", b =>
                {
                    b.Navigation("Admissions");

                    b.Navigation("ComSubs");

                    b.Navigation("DOBChanges");

                    b.Navigation("ExpellDetails");

                    b.Navigation("FeeDiscounts");

                    b.Navigation("FreeAdmissions");

                    b.Navigation("IssuedBoardCertificates");

                    b.Navigation("IssuedBooks");

                    b.Navigation("IssuedCertificates");

                    b.Navigation("MessageRecords");

                    b.Navigation("OldJinnahians");

                    b.Navigation("ParentsVisits");

                    b.Navigation("ProhibitedMaterials");

                    b.Navigation("SelectedForCadetColleges");

                    b.Navigation("SignatureSpecimen");

                    b.Navigation("StudentComplaigns");

                    b.Navigation("StudentMobiles");

                    b.Navigation("StudentPhotos");

                    b.Navigation("StudentThumbImpressions");

                    b.Navigation("StudentsTransports");

                    b.Navigation("StudentsWarnings");

                    b.Navigation("UnwantedClients");
                });

            modelBuilder.Entity("Models.StudentAttendanceType", b =>
                {
                    b.Navigation("HostelAttendances");

                    b.Navigation("StudentAttendences");
                });

            modelBuilder.Entity("Models.Subject", b =>
                {
                    b.Navigation("ClassSubjects");

                    b.Navigation("EmployeeExperinceSubjects");

                    b.Navigation("ExamDates");

                    b.Navigation("Homework");

                    b.Navigation("TeachingSubjects");
                });

            modelBuilder.Entity("Models.tbl_AccountGroup", b =>
                {
                    b.Navigation("tbl_AccountLedger");
                });

            modelBuilder.Entity("Models.tbl_BudgetMaster", b =>
                {
                    b.Navigation("BudgetDetails");
                });

            modelBuilder.Entity("Models.tbl_Designation", b =>
                {
                    b.Navigation("tbl_Employee");
                });

            modelBuilder.Entity("Models.tbl_Employee", b =>
                {
                    b.Navigation("EmployeeAttendances");

                    b.Navigation("EmployeeExperinceSubjects");

                    b.Navigation("EmployeeExpriences");

                    b.Navigation("EmployeeShortLeaves");

                    b.Navigation("EmployeeThumbImpressions");

                    b.Navigation("LeavedStaffs");

                    b.Navigation("ProfessionalTrainings");

                    b.Navigation("Qualifications");

                    b.Navigation("TeachingSubjects");
                });

            modelBuilder.Entity("Models.tbl_ExpenseMaster", b =>
                {
                    b.Navigation("ExpenseDetails");
                });

            modelBuilder.Entity("Models.tbl_JournalMaster", b =>
                {
                    b.Navigation("JournalDetails");
                });

            modelBuilder.Entity("Models.tbl_MonthlySalary", b =>
                {
                    b.Navigation("SalaryPayments");

                    b.Navigation("tbl_MonthlySalaryDetails");
                });

            modelBuilder.Entity("Models.tbl_PayHead", b =>
                {
                    b.Navigation("SalaryPackageDetails");
                });

            modelBuilder.Entity("Models.tbl_PaymentMaster", b =>
                {
                    b.Navigation("PaymentDetails");
                });

            modelBuilder.Entity("Models.tbl_ReceiptMaster", b =>
                {
                    b.Navigation("ReceiptDetails");
                });

            modelBuilder.Entity("Models.tbl_SalaryPackage", b =>
                {
                    b.Navigation("SalaryPackageDetails");
                });

            modelBuilder.Entity("PublicPostCategory", b =>
                {
                    b.Navigation("ContentPosts");
                });
#pragma warning restore 612, 618
        }
    }
}
