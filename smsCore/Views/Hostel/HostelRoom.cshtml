@inject StaticResources resources
@model Room

@{
    ViewBag.Title = "Index";
    //if (Request.IsAjaxRequest())
    //{
    //    Layout = null;
    //}
}

<div class="breadcrumbs ace-save-state" id="breadcrumb">
    <ul class="breadcrumb">
        <li>
            <i class="fa fa-home ace-icon home-icon">

            </i>
            <a href="@Url.Action("Index", "Dashboard")">Dashboard</a>
        </li>
        <li class="active">
            Rooms
        </li>

    </ul>
</div>
<section class="content">
    @*@using (Ajax.BeginForm("HostelRoom", "Hostel", new AjaxOptions { HttpMethod = "POST", OnComplete = "completed", OnSuccess = "reloadGridData", LoadingElementId = "editzRoommainForm #server-progress", OnBegin = "begin" }, new { id = "editRoommainForm", enctype = "multipart/form-data", data_reset = "true" }))
    {*@
    <form asp-action="HostelRoom" asp-controller="Hostel" data-ajax="true" data-ajax-method="post" enctype="multipart/form-data" data-ajax-complete="completed" data-ajax-begin="begin" class="form-horizontal form-label-left input_mask" id="editRoommainForm" data_reset="true">

        <div class="row">

            <div class="col-12 ">
                <div class="card">
                    <div class="card-header">
                        <h3 class="card-title titlefix">Rooms Record <a href="https://www.youtube.com/watch?v=yqoeHNNcBCw&list=UUQFf95Tyl3o9y-DE0vvlTQg#t=55s" target="_blank" class="btn btn-default btn-sm float-right"><i class="fa fa-question-circle"></i> Help </a></h3>
                    </div>
                    <div class="card-body">
                        @Html.AntiForgeryToken()
                        @Html.ValidationSummary(true)

                        <div class="row">
                            <div class="col-12">
                                <div id="message">
                                </div>
                            </div>
                        </div>
                        <div class="Container" id="room">

                            <div class="row ">
                                @Html.Partial("_PartialCampusSelector", new PartialCampusViewModels { ParentContainerID = "room", ColCssClass = "col-12 col-md-3 col-sm-4 has-feedback", CampusFieldName = "CampusId", ShowCampus = true })
                                <div class="col-12 col-md-3 col-sm-4 has-feedback">
                                    <label>Hostel</label>
                                    @*<select name="HostelId" id="HostelId" class="form-control"></select>*@

                                    <div class="controls">
                                        @Html.DropDownListFor(model => model.HostelId, (SelectList)ViewBag.hstlename, new { @class = " form-control has-feedback-left", required = "true" })
                                        <span class="fa fa-building small form-control-feedback left" aria-hidden="true"></span>
                                        @Html.ValidationMessageFor(model => model.HostelId)
                                    </div>
                                </div>

                                <div class="col-12 col-md-3 col-sm-4 has-feedback">
                                    <label>Room Number</label><font class="text-danger">*</font>
                                    <div class="controls">
                                        @Html.TextBoxFor(model => model.RoomNo, new { @class = " form-control has-feedback-left", required = "true" })
                                        <span class="fa fa-home small form-control-feedback left" aria-hidden="true"></span>
                                        @Html.ValidationMessageFor(model => model.RoomNo)
                                    </div>

                                </div>
                                <div class="col-12 col-md-3 col-sm-4 has-feedback">
                                    <label>Floor</label><font class="text-danger">*</font>
                                    <div class="controls">
                                        @Html.TextBoxFor(model => model.Floor, new { @class = " form-control has-feedback-left", required = "true" })
                                        <span class="fa fa-building small form-control-feedback left" aria-hidden="true"></span>
                                        @Html.ValidationMessageFor(model => model.Floor)
                                    </div>
                                </div>
                                <div class="col-12 col-md-3 col-sm-4 has-feedback">
                                    <label>Capacity</label><font class="text-danger">*</font>
                                    <div class="controls">
                                        @Html.TextBoxFor(model => model.Capacity, new { @class = " form-control has-feedback-left", required = "true", type = "number" })
                                        <span class="fa fa-bed small form-control-feedback left" aria-hidden="true"></span>
                                        @Html.ValidationMessageFor(model => model.Capacity)
                                    </div>
                                </div>
                            </div>

                            <div class="row">
                                <div class="col-12">
                                    @* <a href="@Url.Action("Index", "Hostel")" aria-label="Close" class="btn btn-danger float-left mt-2"> <i class="fa fa-times mr-2"></i>Back to Dashboard</a>*@
                                    <button type="reset" name="Reset" id="resetbtn" class="btn btn-primary float-right  mt-2"><i class="fa fa-refresh mr-2"></i>Reset</button>
                                    <button type="submit" value="Create" name="Update" id="updatebtn" class="btn btn-primary float-right mt-2 mr-2">
                                        <i class="fa fa-save mr-2"></i>
                                        <span>
                                            <i id="server-progress" style="display: none;" class=" fa fa-spinner fa-spin "></i>
                                        </span> Save
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-12">
                <div class="card">
                    <div class="card-header">
                        <h3 class="card-title titlefix">Rooms List</h3>
                    </div>
                    <div class="card-body">
                        @{
                            var modelgrid = new GridModel()
            {
                GridId = "GridS",
                AllowExcelExport = true,
                AllowPdfExport = true,
                AllowGrouping = true,
                Width = "auto",
                Height = "auto",
                ShowHeader = false,
                Columns = new List<Column>
                        {
                        new Column{FieldName="hostelName",HeaderText="Hostel Name",AllowSorting=true,Width="80",HeaderTextAlign=TextAlign.Left},
                        new Column{FieldName="roomNo",HeaderText="Room No",AllowSorting=true,Width="80",HeaderTextAlign=TextAlign.Left},
                        new Column{FieldName="floor",HeaderText="Floor No",AllowSorting=true,Width="80",HeaderTextAlign=TextAlign.Left},
                        new Column{FieldName="capacity",HeaderText="Capacity",AllowSorting=true,Width="80",HeaderTextAlign=TextAlign.Left},
                        new Column{FieldName="action",Template="#action",HeaderText="Action",Width="70",HeaderTextAlign=TextAlign.Left},

                        },
            };
                        }
                        @await Html.PartialAsync("_grid",modelgrid)
                        @*  @Html.EJS().Grid("GridS").AllowFiltering().FilterSettings(filter => filter.Type(FilterType.Menu)).AllowGrouping().Height("300").Width("auto").AllowExcelExport().AllowPdfExport().ShowColumnMenu().ShowColumnChooser().AllowResizing().Columns(col =>
                        {
                        col.Field("HostelName").HeaderText("Hostel Name").Width("80").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Left).Add();
                        col.Field("RoomNo").HeaderText("Room No").Width("80").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Left).Add();
                        col.Field("Floor").HeaderText("Floor No").Width("80").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Left).Add();
                        col.Field("Capacity").HeaderText("Capacity").Width("80").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Left).Add();
                        col.Field("action").Template("#action").HeaderText("Action").Width("70").TextAlign(TextAlign.Center).Add();

                        }).FilterSettings(filter => { filter.Type(Syncfusion.EJ2.Grids.FilterType.CheckBox); }).AllowSorting(true).PageSettings(page => page.PageSize(5)).Toolbar(new List<string>()
                        { "PdfExport", "Print", "ExcelExport", "Search" ,"ColumnChooser" }).Render()

                        <script type="text/x-jsrender" id="action">
                        <a title="Edit" class="editL" id="${Id}" href="/Hostel/EditRooms/${Id}"><i class="fa fa-edit"></i></a>
                        <a title="Delete" class="delete" id="${Id}" href="/Hostel/DeleteRooms/${Id}"><i class="fa fa-trash ml-2"></i></a>
                        </script>*@
                    </div>
                    <script type="text/x-jsrender" id="action">
                        <a title="Edit" class="editL" id="${Id}" href="/Hostel/EditRooms/${Id}"><i class="fa fa-edit"></i></a>
                        <a title="Delete" class="delete" id="${Id}" href="/Hostel/DeleteRooms/${Id}"><i class="fa fa-trash ml-2"></i></a>
                    </script>
                </div>
            </div>

        </div>
    </form>
</section>

@Html.EJS().ScriptManager()
<script @resources.JavaScript>
    setTimeout(function () {
        $('#Campus').trigger('change');
        $('#HostelId').trigger('change');
    },
        300);
    $('#Campus').on('change',
        function () {
            var url = '@Url.Action("Gethostel", "Hostel")';
            url += '?campusId=' + $('#Campus').val();
            $.get(url,
                function (data) {
                    var data = JSON.parse(data);

                    $('#HostelId').html('').select2({
                        data: data,
                        width: '100%'
                    });
                });
        });

    $(document).ready(function () {
        var url2 = '@Url.Action("GetRoomList")';
        var grid = document.getElementById("GridS").ej2_instances[0];
        grid.dataSource = [];
        grid.dataSource = new ej.data.DataManager({
            url: url2,
            adaptor: new ejs.data.UrlAdaptor()
        });
    });

    function reloadGridData() {
        var gird = document.getElementById('GridS').ej2_instances[0];
        gird.refresh();
    }
    // Modal For Delete Staff Issued Book List //
    $('#GridS').on('click',
        'a.delete',
        function (e) {
            e.preventDefault();
            var url = $(this).attr('href');

            BootstrapDialog.show({
                message: $('#bootstrap-diallog').html('<div />').load(url),
                onhide: function (dialogRef) {
                    $('body').append('<div id="bootstrap-diallog"></div>');
                    reloadGridData();
                }
            });
            return false;
        });

    $('#GridS').on('click',
        'a.editL',
        function (e) {
            e.preventDefault();
            var url = $(this).attr('href');

            BootstrapDialog.show({
                message: $('#bootstrap-diallog').html('<div />').load(url),
                onhide: function (dialogRef) {
                    $('body').append('<div id="bootstrap-diallog"></div>');
                    reloadGridData();
                }
            });
            return false;
        });
</script>