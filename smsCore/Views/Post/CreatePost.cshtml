@model PublicContentPost


<link href="https://cdnjs.cloudflare.com/ajax/libs/summernote/0.8.2/summernote.css" rel="stylesheet">
@*@using (Ajax.BeginForm("CreatePost", "Post", new AjaxOptions { HttpMethod = "POST", OnComplete = "completed", LoadingElementId = "postCreateForm #server-progress", OnBegin = "begin" }, new { enctype = "multipart/form-data", id = "postCreateForm" }))
{*@

<form asp-action="CreatePost" asp-controller="CreatePost"  data-ajax="true" data-ajax-method="post" enctype="multipart/form-data" data-ajax-complete="completed" data-ajax-begin="begin" class="form-horizontal form-label-left input_mask" id="postCreateForm" data_reset="true">
                   


    @Html.AntiForgeryToken()
    <div class="container" >
        <p><h4>Post</h4></p>
        <div class="row">
            <div class="col-12 col-sm-8  col-md-9  has-feedback">
                <label class="control-label">Title</label>
                <div class="controls">
                    @Html.EditorFor(model => model.PostTitle, new { htmlAttributes = new { @class = "form-control" } })
                    <span class="fa fa-sticky-note form-control-feedback left" aria-hidden="true"></span>
                    @Html.ValidationMessageFor(model => model.PostTitle, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="col-12 col-sm-4 col-md-3 form-group">
                <label for="basicinput">PostType</label>
                <div class="controls">
                    @Html.DropDownListFor(model => model.PostCategoryId, (SelectList)ViewBag.posttype, new { @class = "form-control" })
                    <span class="fa fa-sticky-note form-control-feedback left" aria-hidden="true"></span>
                </div>

            </div>

            <div class="col-12 has-feedback">
                <label class="control-label">
                    Content/Description
                </label>

                <div class="controls">
                    @Html.TextAreaFor(model => model.PostContent, htmlAttributes: new { @class = "form-control input-lg textarea-editor", rows = "20" })

                                @Html.ValidationMessageFor(model => model.PostContent, "", new { @class = "text-danger" })
                            </div>
            </div>
            <div class="col-12 col-sm-6 col-md-3 has-feedback">
                @Html.LabelFor(model => model.PreviewImage, htmlAttributes: new { @class = "control-label" })
                <div class="controls">
                    <input type="file" class="form-control-file form-control" id="PreviewImage" name="PreviewImage">
                    <span class="fa fa-file-image-o form-control-feedback left" aria-hidden="true"></span>
                    @Html.ValidationMessageFor(model => model.PreviewImage, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-12 col-sm-6 col-md-3 has-feedback">
                @Html.LabelFor(model => model.DetailImage, htmlAttributes: new { @class = "control-label" })
                <div class="controls">
                    <input type="file" class="form-control-file form-control" id="DetailImage" name="DetailImage">
                    <span class="fa fa-file-image-o form-control-feedback left" aria-hidden="true"></span>
                    @Html.ValidationMessageFor(model => model.DetailImage, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-12 col-md-12">
                <button type="submit" value="Create" name="Update" id="updatebtn" class="btn btn-primary pull-right sico-btn my-2">

                    Save
                </button>
            </div>

        </div>
        
    </div>

    </form>


<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/summernote/0.8.2/summernote.js"></script>

@*<script src="/Scripts/jquery-1.10.2.js"></script>*@
<script>
    $('.textarea-editor').summernote(
        {
            height: 300,                 // set editor height
            minHeight: null,             // set minimum height of editor
            maxHeight: null,             // set maximum height of editor
            focus: true                  // set focus to editable area after initializing summernote
        });

</script>

