@model PublicSlider


@*@using (Ajax.BeginForm("CreateSlider", "Post", new AjaxOptions { HttpMethod = "POST", OnComplete = "completed", LoadingElementId = "postCreateForm #server-progress", OnBegin = "begin" }, new { enctype = "multipart/form-data", id = "postCreateForm" }))
{*@

<form asp-action="CreateSlider" asp-controller="CreateSlider"  data-ajax="true" data-ajax-method="post" enctype="multipart/form-data" data-ajax-complete="completed" data-ajax-begin="begin" class="form-horizontal form-label-left input_mask" id="postCreateForm" data_reset="true">
       
    @Html.HiddenFor(model=>model.Id)
    @Html.AntiForgeryToken()
    <div class="container" >
        <p><h4>Sliders</h4></p>
        <div class="row">
            <div class="col-12">
                <div id="message"></div>
            </div>
            <div class="col-12 col-sm-6  col-md-4  has-feedback">
                <label class="control-label">First Line Text</label>
                <div class="controls">
                    @Html.EditorFor(model => model.FirstLine, new { htmlAttributes = new { @class = "form-control" } })
                    <span class="fa fa-sticky-note form-control-feedback left" aria-hidden="true"></span>
                    @Html.ValidationMessageFor(model => model.FirstLine, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-12 col-sm-6  col-md-4  has-feedback">
                <label class="control-label">Second Line Text</label>
                <div class="controls">
                    @Html.EditorFor(model => model.SecondLine, new { htmlAttributes = new { @class = "form-control" } })
                    <span class="fa fa-sticky-note form-control-feedback left" aria-hidden="true"></span>
                    @Html.ValidationMessageFor(model => model.SecondLine, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-12 col-sm-6 col-md-4  has-feedback">
                <label class="control-label">Thrid Line Text</label>
                <div class="controls">
                    @Html.EditorFor(model => model.ThirdLine, new { htmlAttributes = new { @class = "form-control" } })
                    <span class="fa fa-sticky-note form-control-feedback left" aria-hidden="true"></span>
                    @Html.ValidationMessageFor(model => model.ThirdLine, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="col-12 col-sm-6 col-md-4 form-group">
                <label for="basicinput">Group</label>
                <div class="controls">
                    @Html.DropDownListFor(model => model.SliderGroup, new SelectList(new List<string>() { "home" }), new { @class = "form-control" })
                    <span class="fa fa-sticky-note form-control-feedback left" aria-hidden="true"></span>
                </div>

            </div>

            <div class="col-12 col-sm-6 col-md-4  has-feedback">
                <label class="control-label">Button Text</label>
                <div class="controls">
                    @Html.EditorFor(model => model.ButtonText, new { htmlAttributes = new { @class = "form-control" } })
                    <span class="fa fa-sticky-note form-control-feedback left" aria-hidden="true"></span>
                    @Html.ValidationMessageFor(model => model.ButtonText, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-12 col-sm-6 col-md-4  has-feedback">
                <label class="control-label">Button Url</label>
                <div class="controls">
                    @Html.EditorFor(model => model.ButtonUrl, new { htmlAttributes = new { @class = "form-control" } })
                    <span class="fa fa-sticky-note form-control-feedback left" aria-hidden="true"></span>
                    @Html.ValidationMessageFor(model => model.ButtonUrl, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-12 col-sm-6 col-md-4 has-feedback">
                @Html.LabelFor(model => model.ImagePath, htmlAttributes: new { @class = "control-label" })
                <div class="controls">
                    <input type="file" class="form-control-file" id="PreviewImage" name="PreviewImage">
                    @Html.ValidationMessageFor(model => model.ImagePath, "", new { @class = "text-danger" })
                </div>
            </div>


            <div class="col-12 ">
                <button type="submit" value="Create" name="Update" id="updatebtn" class="btn sico-btn btn-primary pull-right my-2 mr-2">
                    Save
                </button>
            </div>

        </div>
        
    </div>
</form>


<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/summernote/0.8.2/summernote.js"></script>

@*<script src="/Scripts/jquery-1.10.2.js"></script>*@
<script>
    $('.textarea-editor').summernote(
        {
            height: 300,                 // set editor height
            minHeight: null,             // set minimum height of editor
            maxHeight: null,             // set maximum height of editor
            focus: true                  // set focus to editable area after initializing summernote
        });

</script>

