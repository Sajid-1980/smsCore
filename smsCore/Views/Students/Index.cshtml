
@model IEnumerable<StudentViewModel>

@{
    ViewBag.Title = "Index";
}

<div class="sico-container" id="studentinsdex">
    <div>
       @* @using (Html.BeginForm("Index", "Students", FormMethod.Get, new {@class = "form-horizontal form-label-left input_mask", id = "SearchForm"}))
        {*@

        <form asp-action="Index" asp-controller="Students" data-ajax="true" data-ajax-method="get" class="form-horizontal form-label-left input_mask" id="SearchForm" >

            <div class="row sico-form-col pt-2 pb-2">
                @Html.AntiForgeryToken()
                @Html.ValidationSummary(true)
                <div class="col-12">
                    <h5 class="border-bottom">
                        Search Student
                        <a href="@Url.Action("Create")" class="btn btn-dark pull-right"><i class="fa fa-plus-circle mr-4"></i> Add New</a>
                    </h5>

                </div>
                @*@Html.Partial("_PartialSchoolProperty", new ViewDataDictionary { { "ForSearch", true }, { "NoSubjects", true }, { "NoExams", true }, { "NoGroups", true }, { "ColCssClass", "col-6 col-sm-4 col-md-3" } })*@
                @await Html.PartialAsync("_PartialCampusSelector", new PartialCampusViewModels {ParentContainerID = "studentinsdex", ColCssClass = "col-6 col-sm-4 col-md-3", ForSearch = true, ShowSession = true, ShowCampus = true, ShowClasses = true, ShowSections = true})

                <div class="col-6 col-md-2">
                    <label>Registration No.</label>
                    <div class="controls">
                        @Html.TextBox("RegistrationNo", (string)ViewBag.RegistrationNo, new { @class = "form-control has-feedback-left", placeholder = "Registration No", ng_model = "studentSearchParams.RegistrationNo" })
                                        <span class="fa fa-neuter form-control-feedback left" aria-hidden="true"></span>
                                    </div>
                </div>
                <div class="col-12 col-md-4">
                    <label>Student name </label>
                    <div class="controls">
                        @Html.TextBox("StudentName", (string)ViewBag.StudentName, new { @class = "form-control has-feedback-left", placeholder = "Student Name", ng_model = "studentSearchParams.StudentName" })
                                        <span class="fa fa-user form-control-feedback left" aria-hidden="true"></span>
                                    </div>
                </div>

                <div class="col-12 col-md-4">
                    <label>Father's Name </label>
                    <div class="controls">
                        @Html.TextBox("FName", (string)ViewBag.FName, new { @class = "form-control has-feedback-left", placeholder = "Father Name", ng_model = "studentSearchParams.FName" })
                        <span class="fa fa-user form-control-feedback left" aria-hidden="true"></span>
                    </div>
                </div>

                <div class="col-12 col-md-2">
                    <label>CNIC </label>
                    <div class="controls">
                        @Html.TextBox("CNIC", (string)ViewBag.CNIC, new { @class = "form-control has-feedback-left", placeholder = "CNIC", ng_model = "studentSearchParams.CNIC" })
                                        <span class="fa fa-user form-control-feedback left" aria-hidden="true"></span>
                                    </div>
                </div>

                <div class="col-12">
                    <button type="button" onclick="search()" class="btn btn-primary pull-right mt-4"><i class="fa fa-search mr-4"></i> Search</button>
                </div>
            </div>
       @* }*@

       </form>
        <div class="row sico-form-col mt-1 p-1 pt-3">
            <div class="col">
                <h5>Search Result: @Html.Raw(ViewBag.criteria)</h5>
            </div>
        </div>

    </div>

</div>


<div class="row">
    <div id="Student-gridContainer" class="col-12">
        <table id="jqgStudent" cellpadding="0" cellspacing="0"></table>
        <div id="jqgpStudent" style="text-align: center;"></div>

    </div>
</div>

@section Scripts {
    @*@Scripts.Render("~/bundles/jqueryval")*@

    <script>
        function reloadGridData() {
            $('#jqgStudent').trigger('reloadGrid', { current: true, fromserver: true });
        }

        $(document).ready(function() {
            setTimeout(function() { search(); }, 500);
        });

        function search() {
            var currids = [];
            url1 = '@Url.Action("GetStudents", "Students")';
            var session = $('#Session').val();
            var campus = $('#Campus').val();
            var classes = $('#Classes').val();
            var section = $('#Sections').val();
            var feegroup = $('#FeeGroup').val();
            var reNo = $('#RegistrationNo').val();
            var sName = $('#StudentName').val();
            var fName = $('#FName').val();
            var cnic = $('#CNIC').val();
            url1 += '?session=' + session + '&campus=' + campus + '&classes=' + classes + '&section=' + section + '&feegroup=' + feegroup + '&reNo=' + reNo + '&sName=' + sName + '&fName=' + fName + '&cnic=' + cnic;
            $('#jqgStudent').jqGrid('clearGridData');
            $('#jqgStudent').jqGrid({
                //url from wich data should be requested
                url: url1,
                //type of data
                datatype: 'json',
                //url access method type
                mtype: 'Post',
                //columns names
                //colNames: ['sr', 'ccode', 'cname', 'caddress', 'cphone'],
                //columns model
                colModel: [
                    { label: 'Id', name: 'sr', index: 'sr', align: 'left', width: '150px' },
                    { label: 'Registration No', name: 'RegistrationNo', index: 'RegistrationNo', align: 'left' },
                    { label: 'Student Name', name: 'StudentName', index: 'StudentName', align: 'left' },
                    { label: 'Father Name', name: 'FName', index: 'FName', align: 'left' },
                    { label: 'Email', name: 'Email', index: 'Email', align: 'left' },
                    { label: 'Action', name: 'action', index: 'action', align: 'center' }
                ],
                caption: 'List of Students',
                //enable footer
                footerrow: false,
                userDataOnFooter: false,
                //expect object instead of flat array
                jsonReader: { repeatitems: false, id: 'sr' },
                //pager for grid
                pager: $('#jqgpStudent'),
                //number of rows per page
                rowNum: 10,
                //initial sorting column
                sortname: 'sr',
                //initial sorting direction
                sortorder: 'asc',
                //we want to display total records count
                viewrecords: true,
                multiselect: true,
                editable: true,
                onSelectRow: function(a, b, c) {
                    if (this.p.selarrrow.length === currids.length) {
                        $('#cb_' + $.jgrid.jqID(this.p.id), this.grid.hDiv)[this.p.useProp ? 'prop' : 'attr']("checked", true);
                    }
                },
                loadComplete: function() {
                    var table = this;
                    setTimeout(function() {
                            updatePagerIcons(table);
                        },
                        0);
                },
                gridComplete: function() {
                    currids = $(this).jqGrid('getDataIDs');

                    $('.ajax').on('click',
                        function(e) {
                            e.preventDefault();
                            var title = $(this).attr('title');
                            var url = $(this).attr('href');

                            BootstrapDialog.show({
                                title: title,
                                message: $('<div />').load(url) //,
                                //onhide: function (dialogRef) {
                                //    //alert('Dialog is popping down, its message is ' + dialogRef.getMessage());
                                //    if (type == 'rg') {
                                //        LoadRegion($('#Company').val());
                                //    }
                                //    else if (type == 'ar') {

                                //        LoadArea($('#Company').val());
                                //    }
                                //    else if (type == 'tr') {

                                //        LoadTeritory($('#Company').val());
                                //    }
                                //}
                            });
                            return false;
                        });

                }
            });

            $('#jqgStudent').jqGrid('setGridParam', { url: url1 });
            updatePagerIcons();
            var DataGrid = $('#jqgStudent');
            //sets the grid size initially
            DataGrid.jqGrid('setGridWidth', parseInt($('#Student-gridContainer').width()));

            //handles the grid resize on window resize
            $(window).resize(function() {
                DataGrid.jqGrid('setGridWidth', parseInt($('#Student-gridContainer').width()));
            });
            $('#jqgStudent').trigger('reloadGrid', { current: true, fromserver: true });
            $('#editRecord').on('click',
                function() {
                    var grid = $("#jqgStudent");
                    var rowKey = grid.getGridParam("selrow");

                    if (!rowKey)
                        alert("No rows are selected");
                    else {
                        var selectedIDs = grid.getGridParam("selarrrow");
                        var result = "";
                        for (var i = 0; i < selectedIDs.length; i++) {
                            result += selectedIDs[i] + ",";
                        }

                        alert(result);
                    }
                });
        }

        function updatePagerIcons(table) {
            var replacement =
            {
                'ui-icon-seek-first': 'ace-icon fa fa-angle-double-left bigger-140',
                'ui-icon-seek-prev': 'ace-icon fa fa-angle-left bigger-140',
                'ui-icon-seek-next': 'ace-icon fa fa-angle-right bigger-140',
                'ui-icon-seek-end': 'ace-icon fa fa-angle-double-right bigger-140'
            };
            $('.ui-pg-table:not(.navtable) > tbody > tr > .ui-pg-button > .ui-icon').each(function() {
                var icon = $(this);
                var $class = $.trim(icon.attr('class').replace('ui-icon', ''));

                if ($class in replacement) icon.attr('class', 'ui-icon ' + replacement[$class]);
            });
        }

    </script>
}