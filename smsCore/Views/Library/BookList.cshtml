@model Models.LibraryBookList
@inject StaticResources resourse;
@{
    ViewBag.Title = "BookList";
}

<div class="breadcrumbs ace-save-state" id="breadcrumb">
    <ul class="breadcrumb">
        <li>
            <i class="fa fa-home ace-icon home-icon">

            </i>
            <a href="@Url.Action("Index", "Dashboard")">Dashboard</a>
        </li>
        <li class="active">
            Add Book List
        </li>

    </ul>
</div>

<div class="container" id="BookList">
    @* @using (Ajax.BeginForm("BookList", "Library", new AjaxOptions { HttpMethod = "POST", OnComplete = "completed", OnSuccess = "reloadGridData", LoadingElementId = "addLibraryForm #server-progress", OnBegin = "begin" }, new { id = "addLibraryForm", enctype = "multipart/form-data", data_reset="true" }))
    {*@
    <form asp-action="BookList" asp-controller="Library" data-ajax="true" data-ajax-method="post" enctype="multipart/form-data" data-ajax-complete="completed" data-ajax-begin="begin" class="form-horizontal form-label-left input_mask" id="addLibraryForm" data_reset="true">

        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true)


        <div class="row">
            <div class="col-12">
                <div id="message">
                </div>
            </div>
        </div>
        <div class="card">
            <div class="card-header">
                <h3 class="card-title">Add Book List</h3>
            </div>
            <div class="card-body">
                <div class="row">


                    <div class="col-12 col-sm-3  has-feedback">
                        <label>Accession No </label>
                        <div class="controls">
                            @Html.TextBoxFor(model => model.AccessionNo, new { @class = "form-control has-feedback-left", type = "text" })
                            <span class="fa fa-paper-plane form-control-feedback left" aria-hidden="true"></span>
                            @Html.ValidationMessageFor(model => model.AccessionNo)
                        </div>
                    </div>
                    <div class="col-12 col-sm-3  has-feedback">
                        <label>Classfication No </label>
                        <div class="controls">
                            @Html.TextBoxFor(model => model.ClassficationNo, new { @class = "form-control has-feedback-left" })
                            <span class="fa fa-registered form-control-feedback left" aria-hidden="true"></span>
                            @Html.ValidationMessageFor(model => model.ClassficationNo)
                        </div>
                    </div>
                    <div class="col-12 col-sm-3  has-feedback">
                        <label>Title </label>
                        <div class="controls">
                            @Html.TextBoxFor(model => model.Title, new { @class = "form-control has-feedback-left", type = "text" })
                            <span class="fa fa-tint form-control-feedback left" aria-hidden="true"></span>
                            @Html.ValidationMessageFor(model => model.Title)
                        </div>
                    </div>

                    <div class="col-12 col-sm-3 has-feedback">
                        <label>Author </label>
                        <div class="controls">
                            @Html.TextBoxFor(model => model.Author, new { @class = "form-control has-feedback-left", type = "text" })
                            <span class="fa fa-user form-control-feedback left" aria-hidden="true"></span>
                            @Html.ValidationMessageFor(model => model.Author)
                        </div>
                    </div>

                    <div class="col-12 col-sm-3  has-feedback">
                        <label>Publisher </label>
                        <div class="controls">
                            @Html.TextBoxFor(model => model.Publisher, new { @class = "form-control has-feedback-left", type = "text" })
                            <span class="fa fa-book form-control-feedback left" aria-hidden="true"></span>
                            @Html.ValidationMessageFor(model => model.Publisher)
                        </div>
                    </div>
                    <div class="col-12 col-sm-3  has-feedback">
                        <label>Edition </label>
                        <div class="controls">
                            @Html.TextBoxFor(model => model.Edition, new { @class = "form-control has-feedback-left" })
                            <span class="fa fa-print form-control-feedback left" aria-hidden="true"></span>
                            @Html.ValidationMessageFor(model => model.Edition)
                        </div>
                    </div>
                    <div class="col-12 col-sm-3  has-feedback">
                        <label>Subject </label>
                        <div class="controls">
                            @Html.TextBoxFor(model => model.Subject, new { @class = "form-control has-feedback-left", type = "text" })
                            <span class="fa fa-book form-control-feedback left" aria-hidden="true"></span>
                            @Html.ValidationMessageFor(model => model.Subject)
                        </div>
                    </div>

                    <div class="col-12 col-sm-3  has-feedback">
                        <label>Year Of Publishing </label>
                        <div class="controls">
                            @Html.TextBoxFor(model => model.YearOfPublishing, new { @class = "form-control has-feedback-left", type = "number" })
                            <span class="fa fa-calculator form-control-feedback left" aria-hidden="true"></span>
                            @Html.ValidationMessageFor(model => model.YearOfPublishing)
                        </div>
                    </div>

                    <div class="col-12 col-sm-3  has-feedback">
                        <label>Volume No </label>
                        <div class="controls">
                            @Html.TextBoxFor(model => model.VolumeNo, new { @class = "form-control has-feedback-left", type = "text" })
                            <span class="fa fa-barcode form-control-feedback left" aria-hidden="true"></span>
                            @Html.ValidationMessageFor(model => model.VolumeNo)
                        </div>
                    </div>

                    <div class="col-12 col-sm-3  has-feedback">
                        <label>Language </label>
                        <div class="controls">
                            @Html.TextBoxFor(model => model.Language, new { @class = "form-control has-feedback-left", type = "text" })
                            <span class="fa fa-language form-control-feedback left" aria-hidden="true"></span>
                            @Html.ValidationMessageFor(model => model.Language)
                        </div>
                    </div>
                    <div class="col-12 col-sm-3  has-feedback">
                        <label>Pages </label>
                        <div class="controls">
                            @Html.TextBoxFor(model => model.Pages, new { @class = "form-control has-feedback-left" })
                            <span class="fa fa-pagelines form-control-feedback left" aria-hidden="true"></span>
                            @Html.ValidationMessageFor(model => model.Pages)
                        </div>
                    </div>
                    <div class="col-12 col-sm-3  has-feedback">
                        <label>Price </label>
                        <div class="controls">
                            @Html.TextBoxFor(model => model.Price, new { @class = "form-control has-feedback-left", type = "text" })
                            <span class="fa fa-dollar-sign form-control-feedback left" aria-hidden="true"></span>
                            @Html.ValidationMessageFor(model => model.Price)
                        </div>
                    </div>

                    <div class="col-12 col-sm-3  has-feedback">
                        <label>Sources </label>
                        <div class="controls">
                            @Html.TextBoxFor(model => model.Source, new { @class = "form-control has-feedback-left", type = "text" })
                            <span class="fa fa-list-ol form-control-feedback left" aria-hidden="true"></span>
                            @Html.ValidationMessageFor(model => model.Source)
                        </div>
                    </div>

                    <div class="col-12 col-sm-3  has-feedback">
                        <label>Present Position </label>
                        <div class="controls">
                            @Html.TextBoxFor(model => model.PresentPosition, new { @class = "form-control has-feedback-left", type = "text" })
                            <span class="fa fa-podcast form-control-feedback left" aria-hidden="true"></span>
                            @Html.ValidationMessageFor(model => model.PresentPosition)
                        </div>
                    </div>

                    <div class="col-12 col-sm-3 has-feedback">
                        <label>Remarks </label>
                        <div class="controls">
                            @Html.TextBoxFor(model => model.Remarks, new { @class = "form-control has-feedback-left", type = "text" })
                            <span class="fa fa-bitbucket form-control-feedback left" aria-hidden="true"></span>
                            @Html.ValidationMessageFor(model => model.Remarks)
                        </div>
                    </div>

                    <div class="col-12 col-sm-3  has-feedback">
                        <label>Translator </label>
                        <div class="controls">
                            @Html.TextBoxFor(model => model.Translator, new { @class = "form-control has-feedback-left", type = "text" })
                            <span class="fa fa-tree form-control-feedback left" aria-hidden="true"></span>
                            @Html.ValidationMessageFor(model => model.Translator)
                        </div>
                    </div>

                    <div class="col-12 col-sm-3  has-feedback">
                        <label>Cornor </label>
                        <div class="controls">
                            @Html.TextBoxFor(model => model.Cornor, new { @class = "form-control has-feedback-left", type = "text" })
                            <span class="fa fa-user form-control-feedback left" aria-hidden="true"></span>
                            @Html.ValidationMessageFor(model => model.Cornor)
                        </div>
                    </div>

                </div>

                <div class="row">
                    <div class="col-12">
                        <button type="submit" value="Create" name="Update" id="updatebtn" class="btn btn-primary float-right mt-4 mr-2 m-md-2">
                            <i class="fa fa-save mr-2"></i>
                            <span>
                                <i id="server-progress" style="display: none;" class=" fa fa-spinner fa-spin "></i>
                            </span> Save
                        </button>
                    </div>
                </div>

            </div>
        </div>


        <div class="card">
            <div class="card-header">
                <h3 class="card-title">Book List & Details</h3>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-12">

                        @*                  @Html.EJS().Grid("GridS").AllowFiltering().FilterSettings(filter => filter.Type(FilterType.Menu)).AllowGrouping().Height("300").Width("auto").AllowExcelExport().AllowPdfExport().ShowColumnMenu().ShowColumnChooser().AllowResizing().Columns(col =>
                        {
                        //col.Field("AccessionNo").HeaderText("AccessionNo").Width("80").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Left).Add();
                        //col.Field("ClassficationNo").HeaderText("ClassficationNo").Width("80").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Left).Add();
                        col.Field("Title").HeaderText("Title").Width("80").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Left).Add();
                        col.Field("Author").HeaderText("Author").Width("80").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Left).Add();
                        col.Field("Publisher").HeaderText("Publisher").Width("80").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Left).Add();
                        col.Field("Edition").HeaderText("Edition").Width("80").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Left).Add();
                        //col.Field("Subject").HeaderText("Subject").Width("80").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Left).Add();
                        col.Field("YearOfPublishing").HeaderText("YearOfPublishing").Width("80").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Left).Add();
                        col.Field("VolumeNo").HeaderText("VolumeNo").Width("80").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Left).Add();
                        //col.Field("Language").HeaderText("Language").Width("80").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Left).Add();
                        col.Field("Pages").HeaderText("Pages").Width("80").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Left).Add();
                        col.Field("Price").HeaderText("Price").Width("80").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Left).Add();
                        col.Field("Source").HeaderText("Source").Width("80").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Left).Add();
                        //col.Field("Position").HeaderText("Position").Width("80").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Left).Add();
                        col.Field("Remarks").HeaderText("Remarks").Width("80").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Left).Add();
                        //col.Field("Translator").HeaderText("Translator").Width("80").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Left).Add();
                        col.Field("EntryDate").HeaderText("EntryDate").Width("80").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Left).Add();
                        //col.Field("Cornor").HeaderText("Cornor").Width("80").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Left).Add();
                        col.Field("action").Template("#action").HeaderText("Action").Width("70").TextAlign(TextAlign.Left).Add();

                        }).FilterSettings(filter => { filter.Type(Syncfusion.EJ2.Grids.FilterType.CheckBox); }).AllowSorting(true).PageSettings(page => page.PageSize(5)).Toolbar(new List<string>()
                        { "PdfExport", "Print", "ExcelExport", "Search" ,"ColumnChooser" }).Render()*@
                        @{
                            var modelgrid = new GridModel()
            {
                GridId = "GridS",
                AllowExcelExport = true,
                AllowPdfExport = true,
                AllowGrouping = true,
                Width = "auto",
                Height = "auto",
                ShowHeader = false,
                
                Columns = new List<Column>
                        {
                        new Column{FieldName="accessionNo",HeaderText="AccessionNo",AllowSorting=true,Width="80",HeaderTextAlign=TextAlign.Left},
                        new Column{FieldName="classficationNo",HeaderText="ClassficationNo",AllowSorting=true,Width="80",HeaderTextAlign=TextAlign.Left},
                        new Column{FieldName="title",HeaderText="Title",AllowSorting=true,Width="80",HeaderTextAlign=TextAlign.Left},
                        new Column{FieldName="author",HeaderText="Author",AllowSorting=true,Width="80",HeaderTextAlign=TextAlign.Left},
                        new Column{FieldName="publisher",HeaderText="Publisher",AllowSorting=true,Width="80",HeaderTextAlign=TextAlign.Left},
                        new Column{FieldName="edition",HeaderText="Edition",AllowSorting=true,Width="80",HeaderTextAlign=TextAlign.Left},
                        new Column{FieldName="publisher",HeaderText="Publisher",AllowSorting=true,Width="80",HeaderTextAlign=TextAlign.Left},
                        new Column{FieldName="subject",HeaderText="Subject",AllowSorting=true,Width="80",HeaderTextAlign=TextAlign.Left},
                        new Column{FieldName="yearOfPublishing",HeaderText="YearOfPublishing",AllowSorting=true,Width="80",HeaderTextAlign=TextAlign.Left},
                        new Column{FieldName="volumeNo",HeaderText="VolumeNo",AllowSorting=true,Width="80",HeaderTextAlign=TextAlign.Left},
                        new Column{FieldName="language",HeaderText="Language",AllowSorting=true,Width="80",HeaderTextAlign=TextAlign.Left},
                        new Column{FieldName="price",HeaderText="Price",AllowSorting=true,Width="80",HeaderTextAlign=TextAlign.Left},
                        new Column{FieldName="source",HeaderText="Source",AllowSorting=true,Width="80",HeaderTextAlign=TextAlign.Left},
                        new Column{FieldName="position",HeaderText="Position",AllowSorting=true,Width="80",HeaderTextAlign=TextAlign.Left},
                        new Column{FieldName="remarks",HeaderText="Remarks",AllowSorting=true,Width="80",HeaderTextAlign=TextAlign.Left},
                        new Column{FieldName="translator",HeaderText="Translator",AllowSorting=true,Width="80",HeaderTextAlign=TextAlign.Left},
                        new Column{FieldName="entryDate",HeaderText="EntryDate",AllowSorting=true,Width="80",HeaderTextAlign=TextAlign.Left},
                        new Column{FieldName="cornor",HeaderText="Cornor",AllowSorting=true,Width="80",HeaderTextAlign=TextAlign.Left},
                        new Column{FieldName="action",HeaderText="action",AllowSorting=true,Width="80",HeaderTextAlign=TextAlign.Left},
                        },
                AllowFiltering = true,
            };
                        }
                        @await Html.PartialAsync("_grid",modelgrid)

                    </div>
                    <script type="text/x-jsrender" id="action">
                        <a title="Edit" class="editL" id="${ID}" href="/Library/EditBookList/${ID}"><i class="fa fa-edit"></i></a>
                        <a title="Delete" class="delete" id="${ID}" href="/Library/DeleteBookList/${ID}"><i class="fa fa-trash ml-2"></i></a>
                    </script>
                </div>
            </div>
        </div>
    </form>
</div>

<script @resourse.JavaScript>

    $(document).ready(function () {
        var url2 = '@Url.Action("GetBookList")';
        var grid = document.getElementById("GridS").ej2_instances[0];
        grid.dataSource = [];
        grid.dataSource = new ej.data.DataManager({
            url: url2,
            adaptor: new ejs.data.UrlAdaptor()
        });
    });
    function Add() {
        var title = "Add BookList";
        var url = '@Url.Action("BookList", "Library")';
        BootstrapDialog.show({
            title: title,
            message: $('<div />').load(url),
            onhide: function (dialogRef) {
                reloadGridData();
            }
        });
    }

    function reloadGridData() {
        
        var url2 = '@Url.Action("GetBookList")';
        var grid = document.getElementById("GridS").ej2_instances[0];
        grid.dataSource = [];
        grid.dataSource = new ej.data.DataManager({
            url: url2,
            adaptor: new ejs.data.UrlAdaptor()
        });
        gird.refresh();
    };

    function reloadGridData() {
        var gird = document.getElementById('GridS').ej2_instances[0];
        gird.refresh();
    }
    // Modal For Delete Staff Issued Book List //
    $('#GridS').on('click',
        'a.delete',
        function (e) {
            e.preventDefault();
            var url = $(this).attr('href');

            BootstrapDialog.show({
                message: $('#bootstrap-diallog').html('<div />').load(url),
                onhide: function (dialogRef) {
                    $('body').append('<div id="bootstrap-diallog"></div>');
                    reloadGridData();
                }
            });
            return false;
        });
</script>