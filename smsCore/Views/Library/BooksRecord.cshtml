@model Models.LibraryBookRecord
@inject StaticResources resourse;
@{
    ViewBag.Title = "BooksRecord";
}

<div class="breadcrumbs ace-save-state" id="breadcrumb">
    <ul class="breadcrumb">
        <li>
            <i class="fa fa-home ace-icon home-icon">

            </i>
            <a href="@Url.Action("Index", "Dashboard")">Dashboard</a>
        </li>
        <li class="active">
            Add Book List
        </li>

    </ul>
</div>


<div class="container" id="BookRecords">

   @* @using (Ajax.BeginForm("BooksRecord", "Library", new AjaxOptions { HttpMethod = "POST", OnComplete = "completed", OnSuccess = "reloadGridData", LoadingElementId = "addLibraryRecordForm #server-progress", OnBegin = "begin" }, new { id = "addLibraryRecordForm", enctype = "multipart/form-data", data_reset = "true" }))
    {*@
    <form asp-action="BooksRecord" asp-controller="Library" data-ajax="true" data-ajax-method="post" enctype="multipart/form-data" data-ajax-complete="completed" data-ajax-begin="begin" class="form-horizontal form-label-left input_mask" id="addLibraryIssuedForm" data_reset="true">
  
     
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true)


        <div class="row">
            <div class="col-12">
                <div id="message">

                </div>
            </div>
        </div>
        <div class="card">
            <div class="card-header">
                <h3 class="card-title">Add Book List</h3>
            </div>
            <div class="card-body">
                <div class="row">


                    <div class="col-12 col-sm-3  has-feedback">
                        <label>Library Name </label>
                        <div  class="controls">
                            @Html.DropDownListFor(model => model.LibraryId, (SelectList)ViewBag.LibraryId, new { @class = "form-control has-feedback-left" })
                                                <span class="fa fa-phone form-control-feedback left" aria-hidden="true"></span>
                                                @Html.ValidationMessageFor(model => model.LibraryId)
                                            </div>
                    </div>
                    <div class="col-12 col-sm-3  has-feedback">
                        <label>Book List </label>
                        <div  class="controls">
                            @Html.DropDownListFor(model => model.LibraryBookListId, (SelectList)ViewBag.LibraryBookListId, new { @class = "form-control has-feedback-left" })
                                                <span class="fa fa-mobile form-control-feedback left" aria-hidden="true"></span>
                                                @Html.ValidationMessageFor(model => model.LibraryBookListId)
                                            </div>
                    </div>
                    <div class="col-12 col-sm-3 has-feedback">
                        <label>Shelf No </label>
                        <div  class="controls">
                            @Html.TextBoxFor(model => model.ShelfNo, new { @class = "form-control has-feedback-left", required = "true", type = "text" })
                            <span class="fa fa-mobile form-control-feedback left" aria-hidden="true"></span>
                            @Html.ValidationMessageFor(model => model.ShelfNo)
                        </div>
                    </div>

                    @Html.Partial("_PartialDate", new PartialDateViewModels
                    {
                        Label = "Entry Date",
                        ParentContainerID = "adm-date",
                        ColCssClass = "col-12 col-sm-3 date",
                        ShowAltField = false,
                        DateFieldId = "EntryDate",
                        DateFieldName = "EntryDate",
                        KeepDataFieldReadOnly = true,
                        DefaultDate = DateTime.Now
                    })

                </div>

                <div class="row">
                    <div class="col-12">
                        <button type="submit" value="Create" name="Update" id="updatebtn" class="btn btn-primary float-right mt-5 mr-2 m-md-2">
                            <i class="fa fa-save mr-2"></i>
                            <span>
                                <i id="server-progress" style="display: none;" class=" fa fa-spinner fa-spin "></i>
                            </span> Save
                        </button>
                    </div>
                </div>

            </div>
        </div>


        <div class="card">
            <div class="card-header">
                <h3 class="card-title">Library Books Record List</h3>
            </div>
            <div class="card-body">
                <div class="col-12">
        @*            @Html.EJS().Grid("list").AllowFiltering().FilterSettings(filter => filter.Type(FilterType.Menu)).AllowGrouping().Height("300").Width("auto").AllowExcelExport().AllowPdfExport().ShowColumnMenu().ShowColumnChooser().AllowResizing().Columns(col =>
                    {
                    col.Field("Library").HeaderText("Library Name").Width("60").TextAlign(TextAlign.Left).Add();
                    col.Field("Book").HeaderText("Book Name").Width("120").TextAlign(TextAlign.Left).Add();
                    col.Field("ShelfNo").HeaderText("Shelf No").Width("60").TextAlign(TextAlign.Left).Add();
                    col.Field("EntryDate").HeaderText("Entry Date").Width("60").TextAlign(TextAlign.Left).Add();
                    col.Field("action").Template("#action").HeaderText("Action").Width("70").TextAlign(TextAlign.Left).Add();
                    }).AllowPaging().PageSettings(page => page.PageSize(10)).Toolbar(new List<string> { "PdfExport", "Print", "ExcelExport", "ColumnChooser", "Search" }).Render()*@
                    @{
                        var modelgrid = new GridModel()
            {
                GridId = "list",
                AllowExcelExport = true,
                AllowPdfExport = true,
                AllowGrouping = true,
                Width = "auto",
                Height = "auto",
                ShowHeader = false,
                Columns = new List<Column>
                    {
                    new Column{FieldName="library",HeaderText="Library Name",AllowSorting=true,Width="auto",HeaderTextAlign=TextAlign.Left},
                    new Column{FieldName="book",HeaderText="Book Name",AllowSorting=true,Width="auto",HeaderTextAlign=TextAlign.Left},
                    new Column{FieldName="shelfNo",HeaderText="Shelf No",AllowSorting=true,Width="auto",HeaderTextAlign=TextAlign.Left},
                    new Column{FieldName="entryDate",HeaderText="Entry Date",AllowSorting=true,Width="auto",HeaderTextAlign=TextAlign.Left},
                    new Column{FieldName="action", Template="#action",HeaderText="Action",AllowSorting=true,Width="auto",HeaderTextAlign=TextAlign.Left},
       
                    },
                AllowFiltering = true,
            };
                    }
                    @await Html.PartialAsync("_grid",modelgrid)
                </div>
                <script type="text/x-jsrender" id="action">
                    <a title="Edit" class="editL" id="${ID}" href="/Library/EditBookRecord/${ID}"><i class="fa fa-edit"></i></a>
                    <a title="Delete" class="delete" id="${ID}" href="/Library/DeleteBookRecord/${ID}"><i class="fa fa-trash ml-2"></i></a>

                </script>
            </div>
        </div>
    </form>
</div>
 <script @resourse.JavaScript>
      $(document).ready(function () {
        var url2 = '@Url.Action("GetBooksRecord")';
        var grid = document.getElementById("list").ej2_instances[0];
        grid.dataSource = [];
        grid.dataSource = new ej.data.DataManager({
            url: url2,
            adaptor: new ejs.data.UrlAdaptor()
        });
      });

    function reloadGridData() {
        var gird = document.getElementById('list').ej2_instances[0];
        gird.refresh();
    }

    function Add() {
        var title = "Add Books Record";
        var url = '@Url.Action("BooksRecord", "Library")';
        BootstrapDialog.show({
            title: title,
            message: $('<div />').load(url),
            onhide: function(dialogRef) {
                reloadGridData();
            }
        });
    }

    //Modal for Edit Library 
    $('#list').on('click',
        'a.editL',
        function (e) {
            e.preventDefault();
            var title = 'Edit Library';
            var url = $(this).attr('href');

            BootstrapDialog.show({
                title: title,
                message: $('#bootstrap-diallog').html('<div />').load(url),
                onhide: function (dialogRef) {
                    $('body').append('<div id="bootstrap-diallog"></div>');
                    reloadGridData();
                }
            });
            return false;
        });

    // Modal For Delete Staff Issued Book List //
    $('#list').on('click',
        'a.delete',
        function (e) {
            e.preventDefault();
            var title = 'Staff Issued Book Delete';
            var url = $(this).attr('href');

            BootstrapDialog.show({
                title: title,
                message: $('#bootstrap-diallog').html('<div />').load(url),
                onhide: function (dialogRef) {
                    $('body').append('<div id="bootstrap-diallog"></div>');
                    reloadGridData();
                }
            });
            return false;
        });
</script>