@using Models
@using sms.Models
@using smsCore.ViewModels;

@inject StaticResources resources

@{
    ViewBag.Title = "Driver Wise ";
}
<div class="breadcrumbs ace-save-state" id="breadcrumb">
    <ul class="breadcrumb">
        <li>
            <i class="fa fa-home ace-icon home-icon">

            </i>
            <a href="@Url.Action("Index", "Dashboard")">Dashboard</a>
        </li>
        <li class="active">
            <a href="@Url.Action("StudentReports", "Reports")">Student Report</a>
        </li>
        <li class="active">
            Driver Wise
        </li>
    </ul>
</div>
<section class="content" id="driverwiselist">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header with-border">
                    <h3 class="card-title"><i class="fa fa-search"></i> Select Criteria</h3>
                </div>
                <div class="card-body">
                    <div class="row">
                        @await Html.PartialAsync("_PartialCampusSelector", new PartialCampusViewModels { ParentContainerID = "driverwiselist", ColCssClass = " col-12 col-sm-2  form-group has-feedback", ForSearch = true, ShowCampus = true })
                        <div class="col-12 col-sm-3">
                            <label>Driver</label>
                            <div class="controls"> @Html.DropDownList("driverId", (SelectList)ViewBag.driverlist, new { @class = "form-control" })</div>
                        </div>
                        <div class="  col-12 col-sm-3 pb-2 mt-2 pt-3 form-group has-feedback">
                            <button type="button" class="btn btnSearchStudent btn-primary pull-left sico-button sico-btn mt-2" id="btnSearch"><i class="fa fa-search"></i> Search</button>
                        </div>
                        
                    </div>
                </div>
            </div>
        </div>
        <div class="col-12">
            @{
                var grid = new GridModel
                {
                    GridId="driverwiselist",
                    AddSerialNo=true,
                    AllowPdfExport=true,
                    ReportTitle="Driver Wise Students",
                    Columns=new List<Column> {
                        new Column{ FieldName="AdmissionID", HeaderText="Reg No.", AutoFit=true },
                        new Column{ FieldName="StudentName", HeaderText="Name", AutoFit=true },
                        new Column{ FieldName="FName", HeaderText="Father's Name", AutoFit=true },
                        new Column{ FieldName="ClassName", HeaderText="Class", AutoFit=true },

                        new Column{ FieldName="PickPoint", HeaderText="Pick Point", AutoFit=true },
                        new Column{ FieldName="DriverName", HeaderText="Driver", AutoFit=true },
                        new Column{ FieldName="PickTime", HeaderText="Pick Time", AutoFit=true },
                        new Column{ FieldName="TripNumber", HeaderText="Trip No.", AutoFit=true },
                        new Column{ FieldName="Fare", HeaderText="Fare", AutoFit=true },
                        }
                };
                }
                @Html.Partial("_grid", grid)
                @*@Html.EJS().Grid("driverwiselist").AllowGrouping().Height("auto").Width("auto").AllowExcelExport().AllowPdfExport().ShowColumnMenu().ToolbarClick("toolbarClick").ShowColumnChooser().AllowResizing().Columns(col =>
           {
               col.Template("#sno").HeaderText("S.No").AutoFit(true).TextAlign(TextAlign.Left).Add();
               col.Field("AdmissionID").HeaderText("Reg No").AutoFit(true).TextAlign(TextAlign.Left).Add();
               col.Field("StudentName").HeaderText("Student Name").AutoFit(true).TextAlign(TextAlign.Left).Add();
               col.Field("FName").HeaderText("Father Name").AutoFit(true).TextAlign(TextAlign.Left).Add();
               col.Field("ClassName").HeaderText("Class").AutoFit(true).TextAlign(TextAlign.Left).Add();
               col.Field("PickPoint").HeaderText("Pick Point").AutoFit(true).TextAlign(TextAlign.Left).Add();
               col.Field("DriverName").HeaderText("Driver Name").AutoFit(true).TextAlign(TextAlign.Left).Add();
               col.Field("PickTime").HeaderText("Pick Time").AutoFit(true).TextAlign(TextAlign.Left).Add();
               col.Field("Fare").HeaderText("Fare").AutoFit(true).TextAlign(TextAlign.Left).Add();
           }).AllowFiltering().FilterSettings(filter => { filter.Type(FilterType.CheckBox); }).AllowSorting().AllowPaging().PageSettings(page => page.PageSize(15).PageSizes(new string[] { "15", "30", "50", "All" })).Toolbar(new List<string> { "PdfExport", "Print", "ExcelExport", "ColumnChooser", "Search" }).Render();

                <script id="sno" type="text/x-jsrender">
                    ${sno(index)}
                </script>*@
            </div>
    </div>
</section>

<script @resources.JavaScript>
    //function toolbarClick(args) {
    //    var gridObj = document.getElementById("driverwiselist").ej2_instances[0];
    //    if (args.item.id === 'driverwiselist_pdfexport') {
    //        gridObj.pdfExport();
    //    }
    //    if (args.item.id === 'driverwiselist_excelexport') {
    //        gridObj.excelExport();
    //    }
    //}

    $('#btnSearch').on('click',
        function() {
            var campus = $('#Campus').val();
            var driverId = $('#driverId').val();
            if (!campus) {
                sweetalert('Campus', 'Please select a campus to continue.', 'error');
            }
            var url1 = '@Url.Action("GetDriverWiseList")';
            url1 += '?driverId=' + driverId + '&campusId=' + campus;
            var grid = document.getElementById("@grid.GridId").ej2_instances[0];
            grid.dataSource = [];

            grid.dataSource = new ej.data.DataManager({
                url: url1,
                adaptor: new ejs.data.UrlAdaptor()
            });
        });


</script>
@Html.EJS().ScriptManager()